{
  "hash": "63b9e0b1004efbab36f82d0d265e448f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 3: Predicting HDB Resale Prices with Geographically Weighted Machine Learning Methods\"\nauthor: \"Christover Manafe\"\ndate: \"2024-10-31\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\nformat: \n  html:\n    code-fold: false\n    code-summary: \"code chunk\"\n    number-sections: true\n    number-depth: 4\n---\n\n\n# Overview\n\nHousing is an essential component of household wealth worldwide. For most people, buying a home represents one of the largest investments they will make. Housing prices are influenced by a range of factors, some of which are global—such as a country’s economic conditions or inflation rate—while others are specific to individual properties. These factors can be divided into structural and locational categories. Structural factors relate directly to the property itself, including its size, fittings, and tenure. Locational factors, on the other hand, concern the property’s surroundings, such as proximity to childcare centers, public transportation, and shopping centers.\n\nIn Singapore, public housing plays a unique and essential role. With over one million flats spanning 24 towns and three estates, the Singapore brand of public housing is uniquely different. These flats are home to more than 80% of Singapore’s resident population, with about 90% of them owning their homes.\n\nHousing prices are influenced by a range of factors, such as amenities and accessibility. In Singapore, HDB flats near MRT stations, bus interchanges, shopping centers, and schools often command higher values due to their convenience. Economic conditions also play a role; when the economy is strong and interest rates are low, buyers have more purchasing power, which increases demand and can drive prices up. Additionally, flat attributes such as size, layout, and lease tenure affect prices, with larger flats or those with longer remaining leases generally being more valuable.\n\n# The Objective\n\nIn this exercise, we will build and calibrate a predictive model to estimate HDB resale prices for the period of July to September 2024, using HDB resale transaction records from 2023.\n\n# Getting Started\n\n## The Data\n\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| **Dataset Name**                      | **Description**                                                                                                          | **Format**                                                                                                                   |\n+=======================================+==========================================================================================================================+==============================================================================================================================+\n| Master Plan 2019 Subzone Boundary     | Geospatial data representing the boundaries of different areas in Singapore, specifically at the planning subzone level. | ESRI Shapefile                                                                                                               |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://data.gov.sg/datasets?query=Master+Plan+subzone+boundary&page=1&resultId=d_8594ae9ff96d0c708bc2af633048edfb) |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| HDB Resale data                       | Aspatial data containing HDB resale transacted prices in Singapore from Jan 2017 onwards.                                | CSV                                                                                                                          |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://data.gov.sg/datasets?query=hdb+resale&page=1&resultId=d_8b84c4ee58e3cfc0ece0d773c8ca6abc)                   |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| List of eldercare in Singapore        | Geospatial data containing list of eldercare locations in Singapore.                                                     | geojson                                                                                                                      |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://data.gov.sg/datasets?query=eldercare&page=1&resultId=d_3545b068e3f3506c56b2cb6b6117b884)                    |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| List of hawker centres in Singapore   | Geospatial data containing list of hawker centres locations in Singapore.                                                | geojson                                                                                                                      |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://data.gov.sg/datasets?query=hawker+centre&page=1&resultId=d_4a086da0a5553be1d89383cd90d07ecd)                |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| List of parks in Singapore            | Geospatial data containing list of parks locations in Singapore.                                                         | geojson                                                                                                                      |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://data.gov.sg/datasets?query=parks&page=1&resultId=d_0542d48f0991541706b58059381a6eca)                        |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| List of supermarkets in Singapore     | Geospatial data containing list of supermarkets locations in Singapore.                                                  | geojson                                                                                                                      |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://data.gov.sg/datasets?query=supermarket&page=1&resultId=d_cac2c32f01960a3ad7202a99c27268a0)                  |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| List of CHAS clinics in Singapore     | Geospatial data containing list of CHAS clinics locations in Singapore.                                                  | geojson                                                                                                                      |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://data.gov.sg/datasets?query=chas+clinics&page=1&resultId=d_548c33ea2d99e29ec63a7cc9edcccedc)                 |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| List of kindergartens in Singapore    | Geospatial data containing list of kindergartens locations in Singapore.                                                 | geojson                                                                                                                      |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://data.gov.sg/datasets?query=childcare+services&page=1&resultId=d_5d668e3f544335f8028f546827b773b4)           |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| List of supermarkets in Singapore     | Geospatial data containing list of supermarket locations in Singapore                                                    | geojson                                                                                                                      |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://data.gov.sg/datasets?query=supermarket&page=1&resultId=d_cac2c32f01960a3ad7202a99c27268a0)                  |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| List of MRT/LRT stations in Singapore | Geospatial data containing list of MRT/LRT stations locations in Singapore.                                              | ESRI Shapefile                                                                                                               |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://datamall.lta.gov.sg/content/datamall/en/static-data.html)                                                   |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| List of bus stops in Singapore        | Geospatial data containing list of eldercare in Singapore.                                                               | ESRI Shapefile                                                                                                               |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://datamall.lta.gov.sg/content/datamall/en/static-data.html)                                                   |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| List of primary school in Singapore   | Aspatial data containing list of primary schools in Singapore.                                                           | CSV                                                                                                                          |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://data.gov.sg/datasets?query=primary+school&page=1&resultId=d_688b934f82c1059ed0a6993d2a829089)               |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| CBD coordinates                       | Coordinate of Raffles Place MRT                                                                                          |                                                                                                                              |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| List of shopping malls in Singapore   | Aspatial data containing list of shopping malls in Singapore.                                                            | CSV                                                                                                                          |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | Updated manually from [Source](https://en.wikipedia.org/wiki/List_of_shopping_malls_in_Singapore) with latest data.          |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| List of primary schools in Singapore  | Aspatial data containing list of primary schools in Singapore                                                            | JSON                                                                                                                         |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [MOE](https://www.moe.gov.sg/schoolfinder?journey=Primary%20school)                                                          |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| Good primary schools                  | Aspatial data containing list of top 20 primary schools from <https://schlah.com/>.                                      | CSV                                                                                                                          |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://schlah.com/primary-schools)                                                                                 |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n| List of hospitals in Singapore        | Aspatial data containing list of hospitals in Singapore                                                                  | CSV                                                                                                                          |\n|                                       |                                                                                                                          |                                                                                                                              |\n|                                       |                                                                                                                          | [Source](https://en.wikipedia.org/wiki/List_of_hospitals_in_Singapore)                                                       |\n+---------------------------------------+--------------------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+\n\n: {tbl-colwidths=\"\\[25,50,25\\]\"}\n\n## The Packages\n\nWe will use following packages in this exercise\n\n::: panel-tabset\n## Packages\n\nWe will use following packages in this exercise:\n\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Package**                                                                                    | **Description**                                                                                                                                                                                                   |\n+================================================================================================+===================================================================================================================================================================================================================+\n| [**sf**](https://r-spatial.github.io/sf/)                                                      | Provides functions to manage, process, and manipulate **Simple Features**, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons. |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**sp**](https://cran.r-project.org/web/packages/sp/index.html)                                | Provides classes and methods for Spatial Data.                                                                                                                                                                    |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**spdep**](https://cran.r-project.org/web/packages/spdep/)                                    | Provides a collection of functions to create spatial weights matrix objects from polygon 'contiguities', point patterns by distance, and tessellations.                                                           |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**tidyverse**](https://www.tidyverse.org/)                                                    | A collection of R packages for data science tasks such as importing, tidying, wrangling, and visualizing data.                                                                                                    |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**tmap**](https://cran.r-project.org/web/packages/tmap/)                                      | Provides functions for creating cartographic-quality static maps or interactive maps using the [leaflet](https://leafletjs.com/) API.                                                                             |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**olsrr**](https://olsrr.rsquaredacademy.com/)                                                | A package for building OLS models and performing diagnostic tests.                                                                                                                                                |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**SpatialML**](https://cran.r-project.org/web/packages/SpatialML/)                            | A package that implements a spatial extension of the random forest algorithm.                                                                                                                                     |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**rsample**](https://rsample.tidymodels.org/)                                                 | A package that provides functions to create different types of resamples and corresponding classes for their analysis.                                                                                            |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**Metrics**](https://github.com/mfrasco/Metrics)                                              | A package for common machine learning metrics.                                                                                                                                                                    |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**httr**](https://cran.r-project.org/web/packages/httr/index.html)                            | A package that provides tools for working with URLs and HTTP                                                                                                                                                      |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**jsonlite**](https://cran.r-project.org/web/packages/jsonlite/index.html)                    | A simple and robust JSON parser and generator for R                                                                                                                                                               |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**units**](https://cran.r-project.org/web/packages/units/index.html)                          | A package that provides tools to handle and convert measurement units for numeric values.                                                                                                                         |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**matrixStats**](https://cran.r-project.org/web/packages/matrixStats/index.html)              | A package that provides optimized functions for common matrix and vector operations.                                                                                                                              |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**corrplot**](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) | A package that provides a visual exploratory tool on correlation matrix.                                                                                                                                          |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**ggpubr**](https://cran.r-project.org/web/packages/ggpubr/index.html)                        | A package that provides easy-to-use functions for creating and arranging `ggplot2` plots.                                                                                                                         |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**ggstatsplot**](https://cran.r-project.org/web/packages/ggstatsplot/index.html)              | Provides functions to creates graphics with details from statistical tests included in the plots themselves.                                                                                                      |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**GWmodel**](https://cran.r-project.org/web/packages/GWmodel/index.html)                      | A package for calibrating the geographically weighted family of models.                                                                                                                                           |\n+------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n: {tbl-colwidths=\"\\[15,85\\]\"}\n\n## Code\n\nTo install and launch all R packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sp, spdep, olsrr, SpatialML, tmap, rsample, Metrics, tidyverse, httr, jsonlite, units, matrixStats, corrplot, ggpubr, ggstatsplot, GWmodel)\n```\n:::\n\n:::\n\n## Data Import\n\n### Geospatial Data\n\nLet's import all geospatial dataset into the R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MPSZ-2019\") %>%\n  st_transform(3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `/Users/cham/project/Geospatial-Analytics/chrismanafe/ISSS626-GAA/take_home_ex/take_home_ex03/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                 SUBZONE_N SUBZONE_C       PLN_AREA_N PLN_AREA_C       REGION_N\n1              MARINA EAST    MESZ01      MARINA EAST         ME CENTRAL REGION\n2         INSTITUTION HILL    RVSZ05     RIVER VALLEY         RV CENTRAL REGION\n3           ROBERTSON QUAY    SRSZ01  SINGAPORE RIVER         SR CENTRAL REGION\n4  JURONG ISLAND AND BUKOM    WISZ01  WESTERN ISLANDS         WI    WEST REGION\n5             FORT CANNING    MUSZ02           MUSEUM         MU CENTRAL REGION\n6         MARINA EAST (MP)    MPSZ05    MARINE PARADE         MP CENTRAL REGION\n7                   SUDONG    WISZ03  WESTERN ISLANDS         WI    WEST REGION\n8                  SEMAKAU    WISZ02  WESTERN ISLANDS         WI    WEST REGION\n9           SOUTHERN GROUP    SISZ02 SOUTHERN ISLANDS         SI CENTRAL REGION\n10                 SENTOSA    SISZ01 SOUTHERN ISLANDS         SI CENTRAL REGION\n   REGION_C                       geometry\n1        CR MULTIPOLYGON (((33222.98 29...\n2        CR MULTIPOLYGON (((28481.45 30...\n3        CR MULTIPOLYGON (((28087.34 30...\n4        WR MULTIPOLYGON (((14557.7 304...\n5        CR MULTIPOLYGON (((29542.53 31...\n6        CR MULTIPOLYGON (((35279.55 30...\n7        WR MULTIPOLYGON (((15772.59 21...\n8        WR MULTIPOLYGON (((19843.41 21...\n9        CR MULTIPOLYGON (((30870.53 22...\n10       CR MULTIPOLYGON (((26879.04 26...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\") %>%\n  st_transform(3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ELDERCARE' from data source \n  `/Users/cham/project/Geospatial-Analytics/chrismanafe/ISSS626-GAA/take_home_ex/take_home_ex03/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 133 features and 18 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchas <- st_read(\"data/geospatial/CHASClinics.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CHASClinics' from data source \n  `/Users/cham/project/Geospatial-Analytics/chrismanafe/ISSS626-GAA/take_home_ex/take_home_ex03/data/geospatial/CHASClinics.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1193 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.5818 ymin: 1.016264 xmax: 103.9903 ymax: 1.456037\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare <- st_read(\"data/geospatial/ChildCareServices.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ChildCareServices' from data source \n  `/Users/cham/project/Geospatial-Analytics/chrismanafe/ISSS626-GAA/take_home_ex/take_home_ex03/data/geospatial/ChildCareServices.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkindergartens <- st_read(\"data/geospatial/Kindergartens.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Kindergartens' from data source \n  `/Users/cham/project/Geospatial-Analytics/chrismanafe/ISSS626-GAA/take_home_ex/take_home_ex03/data/geospatial/Kindergartens.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 448 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6887 ymin: 1.247759 xmax: 103.9717 ymax: 1.455452\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhawker_center <- st_read(\"data/geospatial/HawkerCentresGEOJSON.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `HawkerCentresGEOJSON' from data source \n  `/Users/cham/project/Geospatial-Analytics/chrismanafe/ISSS626-GAA/take_home_ex/take_home_ex03/data/geospatial/HawkerCentresGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 125 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6974 ymin: 1.272716 xmax: 103.9882 ymax: 1.449017\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparks <- st_read(\"data/geospatial/Parks.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Parks' from data source \n  `/Users/cham/project/Geospatial-Analytics/chrismanafe/ISSS626-GAA/take_home_ex/take_home_ex03/data/geospatial/Parks.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 430 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6929 ymin: 1.214491 xmax: 104.0538 ymax: 1.462094\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbus_stops <- st_read(dsn = \"data/geospatial\", layer = \"BusStop\") %>%\n  st_transform(crs = 3414) %>%\n  filter(lengths(st_within(., mpsz)) > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `BusStop' from data source \n  `/Users/cham/project/Geospatial-Analytics/chrismanafe/ISSS626-GAA/take_home_ex/take_home_ex03/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5166 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48285.52 ymax: 52983.82\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_stations <- st_read(dsn = \"data/geospatial\", layer = \"RapidTransitSystemStation\") %>%\n  st_transform(crs = 3414) %>%\n  filter(STN_NAM_DE != \"BOCC\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `RapidTransitSystemStation' from data source \n  `/Users/cham/project/Geospatial-Analytics/chrismanafe/ISSS626-GAA/take_home_ex/take_home_ex03/data/geospatial' \n  using driver `ESRI Shapefile'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in CPL_read_ogr(dsn, layer, query, as.character(options), quiet, : GDAL\nMessage 1: Non closed ring detected. To avoid accepting it, set the\nOGR_GEOMETRY_ACCEPT_UNCLOSED_RING configuration option to NO\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 230 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 6068.209 ymin: 27478.44 xmax: 45377.5 ymax: 47913.58\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsupermarkets <- st_read(\"data/geospatial/SupermarketsGEOJSON.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `SupermarketsGEOJSON' from data source \n  `/Users/cham/project/Geospatial-Analytics/chrismanafe/ISSS626-GAA/take_home_ex/take_home_ex03/data/geospatial/SupermarketsGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 526 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6258 ymin: 1.24715 xmax: 104.0036 ymax: 1.461526\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n> Notice that some of the data (e.g. chas, childcare) has its dimensions listed as ‘XYZ’, indicating a z-dimension, even though both zmin and zmax are set to 0. We’ll remove this dimension with [st_zm()](https://r-spatial.github.io/sf/reference/st_zm.html) in our pre-processing.\n>\n> We also filter bus stops points that are located outside of Singapore (e.g. in Johor Bahru Malaysia) using [st_within()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html) function.\n>\n> Although the LTA Data Mall describes the train station data as points, it is actually in polygon format. We’ll address this in our pre-processing steps. Additionally, we’re excluding `BOCC` as it is not an MRT/LRT station.\n\n### Aspatial Data\n\nMost of our aspatial dataset lacks geocoding information. To address this, we’ll use the following function provided by Prof. Kam, which sends an HTTP request to the OneMap API to retrieve geocoding data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords <- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, \n                            postal = NA, \n                            latitude = NA, \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n```\n:::\n\n\n#### Primary Schools in Singapore\n\nCurrently, there is no single source providing downloadable data on primary schools from platforms like [data.gov.sg](https://data.gov.sg/), [MOE](https://www.moe.gov.sg/schoolfinder?journey=Primary%20school), or the [OneMap API](https://www.onemap.gov.sg/apidocs/apidocs). However, by querying the response from [OneMap’s SchoolQueryInfo](https://www.onemap.gov.sg/#/SchoolQueryInfo), we can download the JSON response and read it into R as an `sf` data frame.\n\n![](images/onemap_schoolQuery.png){fig-align=\"center\" width=\"913\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npri_schools <- fromJSON(\"data/aspatial/onemap_prischools.json\")$SearchResults %>%\n    select(SCHOOLNAME, POSTAL_CODE, LATITUDE, LONGITUDE)\npri_schools <- pri_schools[-1,]\nglimpse(pri_schools)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 180\nColumns: 4\n$ SCHOOLNAME  <chr> \"ADMIRALTY PRIMARY SCHOOL\", \"AHMAD IBRAHIM PRIMARY SCHOOL\"…\n$ POSTAL_CODE <chr> \"738907\", \"768643\", \"579646\", \"159016\", \"544969\", \"569785\"…\n$ LATITUDE    <chr> \"1.44304273982377\", \"1.43373998459719\", \"1.36065643548317\"…\n$ LONGITUDE   <chr> \"103.800272823634\", \"103.832709401734\", \"103.832931644894\"…\n```\n\n\n:::\n:::\n\n\nThe result contains data for 180 primary schools, missing two schools from the official MOE list, which can be found at [MOE School Finder](https://www.moe.gov.sg/schoolfinder?journey=Primary%20school). After a manual cross-check, we identified the missing schools as `Kranji Primary School` and `Pioneer Primary School`. Let's add this one manually to the `pri_schools` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_schools <- get_coords(c(\"Kranji Primary School\", \"Pioneer Primary School\")) %>%\n  rename(SCHOOLNAME = address, POSTAL_CODE = postal, LATITUDE = latitude, LONGITUDE = longitude)\nmissing_schools$SCHOOLNAME <- toupper(missing_schools$SCHOOLNAME)\n\nprimary_schools <- bind_rows(pri_schools, missing_schools)\nglimpse(primary_schools)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 182\nColumns: 4\n$ SCHOOLNAME  <chr> \"ADMIRALTY PRIMARY SCHOOL\", \"AHMAD IBRAHIM PRIMARY SCHOOL\"…\n$ POSTAL_CODE <chr> \"738907\", \"768643\", \"579646\", \"159016\", \"544969\", \"569785\"…\n$ LATITUDE    <chr> \"1.44304273982377\", \"1.43373998459719\", \"1.36065643548317\"…\n$ LONGITUDE   <chr> \"103.800272823634\", \"103.832709401734\", \"103.832931644894\"…\n```\n\n\n:::\n:::\n\n\nLet’s convert the `primary_schools` data frame into an `sf` data frame using longitude and latitude coordinates, and project it to CRS 3414. We’ll then save it as an RDS file for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprimary_schools_sf <- st_as_sf(primary_schools, coords=c(\"LONGITUDE\",\"LATITUDE\"), crs=4326) %>%\n  st_transform(crs = 3414)\nwrite_rds(primary_schools_sf, \"data/rds/primary_schools_sf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprimary_schools_sf <- read_rds(\"data/rds/primary_schools_sf.rds\")\nprimary_schools_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 182 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 11777.9 ymin: 28588.52 xmax: 42431.84 ymax: 48729.52\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                       SCHOOLNAME POSTAL_CODE                  geometry\n1        ADMIRALTY PRIMARY SCHOOL      738907 POINT (24322.52 47189.88)\n2    AHMAD IBRAHIM PRIMARY SCHOOL      768643  POINT (27932.21 46161.2)\n3                  AI TONG SCHOOL      579646 POINT (27956.94 38079.99)\n4        ALEXANDRA PRIMARY SCHOOL      159016  POINT (26976.8 30415.01)\n5     ANCHOR GREEN PRIMARY SCHOOL      544969 POINT (33988.81 41411.98)\n6         ANDERSON PRIMARY SCHOOL      569785 POINT (28899.62 40719.89)\n7       ANG MO KIO PRIMARY SCHOOL      569920 POINT (28665.38 39021.17)\n8   ANGLO-CHINESE SCHOOL (JUNIOR)      227988 POINT (28903.58 32351.07)\n9  ANGLO-CHINESE SCHOOL (PRIMARY)      309918  POINT (28265.23 33448.3)\n10         ANGSANA PRIMARY SCHOOL      528565 POINT (39752.22 38402.06)\n```\n\n\n:::\n:::\n\n\n#### Good Primary Schools\n\nIn Singapore's Primary 1 (P1) registration, proximity to a school significantly influences admission priority. When a school has more applicants than available spots, priority is based on both the child’s citizenship and their distance from the school. This makes properties around well-regarded schools especially appealing to families, as living nearby can increase their child’s chances of admission. By including the top 20 primary schools from [Schlah’s ranking](https://schlah.com/primary-schools), we would like to find out how access to quality education factors into housing demand.\n\nSince we already have the full list of primary schools with geocoding, we can now filter out the top 20 schools based on the Schlah ranking.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_20_primary_schools <- c(\"NANYANG PRIMARY SCHOOL\", \"TAO NAN SCHOOL\", \"CATHOLIC HIGH SCHOOL\", \"NAN HUA PRIMARY SCHOOL\", \"ST. HILDA'S PRIMARY SCHOOL\", \"HENRY PARK PRIMARY SCHOOL\", \"ANGLO-CHINESE SCHOOL (PRIMARY)\", \"RAFFLES GIRLS' PRIMARY SCHOOL\", \"PEI HWA PRESBYTERIAN PRIMARY SCHOOL\", \"CHIJ ST. NICHOLAS GIRLS' SCHOOL\", \"ROSYTH SCHOOL\", \"KONG HWA SCHOOL\", \"POI CHING SCHOOL\", \"HOLY INNOCENTS' PRIMARY SCHOOL\", \"AI TONG SCHOOL\", \"RED SWASTIKA SCHOOL\", \"MARIS STELLA HIGH SCHOOL\", \"RULANG PRIMARY SCHOOL\", \"PEI CHUN PUBLIC SCHOOL\", \"SINGAPORE CHINESE GIRLS' PRIMARY SCHOOL\")\ntop_20_primary_schools_sf <- primary_schools_sf %>%\n  filter(SCHOOLNAME %in% top_20_primary_schools)\nwrite_rds(top_20_primary_schools_sf, \"data/rds/top_20_primary_schools_sf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_20_primary_schools_sf <- read_rds(\"data/rds/top_20_primary_schools_sf.rds\")\ntop_20_primary_schools_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 20 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 15245.53 ymin: 31935.11 xmax: 39546.41 ymax: 39607.17\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                        SCHOOLNAME POSTAL_CODE                  geometry\n1                   AI TONG SCHOOL      579646 POINT (27956.94 38079.99)\n2   ANGLO-CHINESE SCHOOL (PRIMARY)      309918  POINT (28265.23 33448.3)\n3             CATHOLIC HIGH SCHOOL      579767 POINT (29162.18 37438.65)\n4  CHIJ ST. NICHOLAS GIRLS' SCHOOL      569405 POINT (28101.77 39607.17)\n5        HENRY PARK PRIMARY SCHOOL      278790  POINT (22524.4 33238.19)\n6   HOLY INNOCENTS' PRIMARY SCHOOL      536451  POINT (34739.9 38763.19)\n7                  KONG HWA SCHOOL      399772  POINT (34072.8 32603.63)\n8         MARIS STELLA HIGH SCHOOL      368051 POINT (33052.36 36084.74)\n9           NAN HUA PRIMARY SCHOOL      128806 POINT (20011.61 33542.72)\n10          NANYANG PRIMARY SCHOOL      268097 POINT (25223.75 33700.87)\n```\n\n\n:::\n:::\n\n\n#### Shopping Mall in Singapore\n\nThe [Mall Coordinates Web Scraper repository](https://github.com/ValaryLim/Mall-Coordinates-Web-Scraper) provides a list of shopping malls in Singapore as of 2019. However, there have been some changes since then, so I manually updated the CSV file in the repository. I cross-referenced the information with [Wikipedia's list of shopping malls in Singapore](https://en.wikipedia.org/wiki/List_of_shopping_malls_in_Singapore), added geocoding information for new malls using the Open Map API, and removed malls that have since closed.\n\nLet's read the CSV file using `read_csv()`, convert it to an `sf` object, and transform the CRS to 3414. Finally, we’ll save it in RDS format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmalls <- read_csv(\"data/aspatial/mall_coordinates_updated.csv\") %>%\n  st_as_sf(coords=c(\"longitude\",\"latitude\"), crs=4326) %>%\n  st_transform(crs = 3414)\nwrite_rds(malls, \"data/rds/malls.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmalls <- read_rds(\"data/rds/malls.rds\")\nmalls\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 199 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 10760.28 ymin: 27369.76 xmax: 45400.14 ymax: 47763.06\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 199 × 3\n    ...1 name                               geometry\n * <dbl> <chr>                           <POINT [m]>\n 1     0 100 AM                  (29129.86 28563.01)\n 2     1 313@SOMERSET            (28485.88 31526.07)\n 3     2 321 CLEMENTI            (20392.39 32702.67)\n 4     3 600 @ TOA PAYOH          (29962.8 35137.08)\n 5     4 888 PLAZA               (23767.99 46536.14)\n 6     5 ADMIRALTY PLACE         (24491.47 46840.26)\n 7     6 ALEXANDRA CENTRAL       (24879.92 29966.77)\n 8     7 ALEXANDRA RETAIL CENTRE (24444.93 28480.59)\n 9     8 AMK HUB                 (29685.94 39027.27)\n10     9 ANCHORPOINT              (24916.03 30149.4)\n# ℹ 189 more rows\n```\n\n\n:::\n:::\n\n\n#### Hospitals\n\nWe’ll load the list of hospitals from [Wikipedia’s List of Hospitals in Singapore](https://en.wikipedia.org/wiki/List_of_hospitals_in_Singapore). Since general and specialty hospitals are more frequently accessed by the broader population, I’ve excluded the \"Psychiatric hospital\" category from this list. I’ve prepared a CSV file with each hospital’s name and postal code, which we’ll pass to the `get_coords` function to retrieve geolocation coordinates. Afterward, we’ll convert the data to an `sf` data frame and save it in RDS format for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhospitals <- read_csv(\"data/aspatial/hospitals.csv\")\naddress_list <- hospitals %>%\n  mutate(address = paste(Name, `Postal Code`, sep = \", \")) %>%\n  pull(address)\n\nhospital_sf <- get_coords(address_list) %>%\n  mutate(name = toupper(str_extract(address, \"^[^,]+\"))) %>%  # Extract and uppercase the hospital name\n  select(name, postal, latitude, longitude) %>%\n  st_as_sf(coords=c(\"longitude\",\"latitude\"), crs=4326) %>%\n  st_transform(crs = 3414)\n\nwrite_rds(hospital_sf, \"data/rds/hospital_sf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhospital_sf <- read_rds(\"data/rds/hospital_sf.rds\")\nglimpse(hospital_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 29\nColumns: 3\n$ name     <chr> \"CHANGI GENERAL HOSPITAL\", \"KK WOMEN'S AND CHILDREN'S HOSPITA…\n$ postal   <chr> \"529889\", \"229899\", \"544886\", \"169608\", \"768828\", \"308433\", \"…\n$ geometry <POINT [m]> POINT (40925.91 35887.54), POINT (29483.67 32528.26), P…\n```\n\n\n:::\n:::\n\n\n#### HDB Resale Data\n\nNow, let’s load the historical HDB resale transactions data from [data.gov.sg](https://data.gov.sg/). To meet our objectives, we’ll filter for transactions from 2023 and from July to September 2024. The 2023 transactions will serve as our training dataset, while those from July to September 2024 will form our test set. We will also use only `5 ROOM` flat type in our exercise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale <- read_csv(\"data/aspatial/HDB_resale.csv\") %>%\n  filter(str_starts(month, \"2023\") | month %in% c(\"2024-07\", \"2024-08\", \"2024-09\")) %>%\n  filter(flat_type == \"5 ROOM\") %>%\n  mutate(address = paste(block,street_name))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 192794 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): month, town, flat_type, block, street_name, storey_range, flat_mode...\ndbl (3): floor_area_sqm, lease_commence_date, resale_price\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nNext, we’ll retrieve the coordinates for each HDB block in the filtered `hdb_resale` dataset, then join this data with the coordinates result. Finally, we’ll save the output in RDS format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naddress_list <- sort(unique(hdb_resale$address))\nhdb_coords <- get_coords(address_list)\nhdb_resale <- hdb_resale %>%\n  left_join(hdb_coords, by = c(\"address\" = \"address\")) %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>%\n  st_transform(crs = 3414)\nwrite_rds(hdb_resale, \"data/rds/hdb_resale.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale <- read_rds(\"data/rds/hdb_resale.rds\")\n```\n:::\n\n\n# Data Pre-processing\n\nIn this section, we’ll perform several data pre-processing steps: remove any z-dimensions in geospatial data, drop unnecessary columns, and check for invalid geometries.\n\n## Z-Dimensions Removal\n\nWe’ll use the `st_zm()` function to remove the z-dimension from the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchas <- st_zm(chas)\nchildcare <- st_zm(childcare)\nhawker_center <- st_zm(hawker_center)\nkindergartens <- st_zm(kindergartens)\nparks <- st_zm(parks)\nsupermarkets <- st_zm(supermarkets)\n```\n:::\n\n\n## Drop Unnecessary Columns\n\nFor most of our locational factor data frames, we only need the facility name (e.g., childcare center, eldercare) and its geometry column. Therefore, we can keep just the first column, which contains the name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbus_stops <- bus_stops %>%\n  select(c(1))\n\nchas <- chas %>%\n  select(c(1))\n\nchildcare <- childcare %>%\n  select(c(1))\n\neldercare <- eldercare %>%\n  select(c(1))\n\nhawker_center <- hawker_center %>%\n  select(c(1))\n\nhospital_sf <- hospital_sf %>%\n  select(c(1))\n\nkindergartens <- kindergartens %>%\n  select(c(1))\n\nmalls <- malls %>%\n  select(c(2))\n\nparks <- parks %>%\n  select(c(1))\n\nsupermarkets <- supermarkets %>%\n  select(c(1))\n\nprimary_schools_sf <- primary_schools_sf %>%\n  select(c(1))\n\ntop_20_primary_schools_sf <- top_20_primary_schools_sf %>%\n  select(c(1))\n\ntrain_stations <- train_stations %>%\n  select(c(5))\n```\n:::\n\n\n## Check Invalid Geometries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(bus_stops) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(chas) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(childcare) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(eldercare) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(hawker_center) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(hospital_sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(kindergartens) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(malls) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(mpsz) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(parks) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(supermarkets) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(primary_schools_sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(top_20_primary_schools_sf) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(train_stations) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(hdb_resale) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\nWe noticed that `mpsz` and `train_stations` has invalid geometries. Let's fix it using [st_make_valid()](https://r-spatial.github.io/sf/reference/valid.html) function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_make_valid(mpsz)\nlength(which(st_is_valid(mpsz) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\nUnfortunately, we can’t run `st_make_valid()` on the `train_stations` data frame as we did with the `mpsz` data frame. So, let’s check which stations have invalid geometries and the reason.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstations_with_invalid_geometry <- data.frame(STN_NAM_DE = train_stations$STN_NAM_DE,\n                                             validity_reason = st_is_valid(train_stations, reason = TRUE)) %>%\n  filter(validity_reason != \"Valid Geometry\")\nstations_with_invalid_geometry\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 STN_NAM_DE\n1  HARBOURFRONT MRT STATION\n2 UPPER THOMSON MRT STATION\n                                       validity_reason\n1 Self-intersection[26569.2890072806 27535.5768024939]\n2 Self-intersection[27873.6944146205 37448.0837479433]\n```\n\n\n:::\n:::\n\n\n> We identified two stations with invalid geometries: HarbourFront and Upper Thomson MRT stations. These geometries are invalid due to self-intersection errors. Since `st_make_valid()` doesn’t resolve this issue and no other resources were found to fix it, we’ll use the `get_coords()` function to retrieve their coordinates and add them to `train_stations`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninvalid_station_names <- train_stations$STN_NAM_DE[!st_is_valid(train_stations$geometry)]\ntrain_stations <- train_stations %>%\n  filter(st_is_valid(geometry)) %>%\n  mutate(geometry = st_centroid(geometry))\n\nmrt_stations_sf <- get_coords(invalid_station_names) %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>%\n  st_transform(crs = 3414) %>%\n  rename(STN_NAM_DE = address) %>%\n  select(STN_NAM_DE, geometry)\n\ntrain_stations <- bind_rows(train_stations, mrt_stations_sf)\n```\n:::\n\n\nNow, let’s verify the `train_stations` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(which(st_is_valid(train_stations) == FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\nEverything looks good now; all geometry issues in our data have been resolved.\n\n# Data Visualization\n\nWith all locational data loaded, transformed, and verified, let’s visualize it before proceeding with our analysis.\n\n::: panel-tabset\n## mpsz\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"white\")\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n## CHAS Clinics\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(chas) +\n  tm_dots(col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n## Childcare center\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(childcare) +\n  tm_dots(col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n## Eldercare center\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(eldercare) +\n  tm_dots(col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\n## Hawker center\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(hawker_center) +\n  tm_dots(col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n## Hospital\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(hospital_sf) +\n  tm_dots(col = \"red\", size = 0.05)\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n## Kindergartens\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(kindergartens) +\n  tm_dots(col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n## Malls\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(malls) +\n  tm_dots(col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n## Mrt Stations & Bus Stops\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstations_map <- tm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(train_stations) +\n  tm_dots(col = \"blue\") +\n  tm_layout(\n    main.title = \"Train Stations\",\n    main.title.size = 0.8\n  )\n\nbus_stops_map <- tm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(bus_stops) +\n  tm_dots(col = \"blue\") +\n  tm_layout(\n    main.title = \"Bus Stops\",\n    main.title.size = 0.8\n  )\n\ntmap_arrange(stations_map, bus_stops_map, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-55-1.png){width=1152}\n:::\n:::\n\n\n## Parks\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(parks) +\n  tm_dots(col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-56-1.png){width=672}\n:::\n:::\n\n\n## Primary School & Good Primary School\n\n\n::: {.cell}\n\n```{.r .cell-code}\nschools_map <- tm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(primary_schools_sf) +\n  tm_dots(col = \"blue\") +\n  tm_layout(\n    main.title = \"Primary Schools\",\n    main.title.size = 0.8\n  )\n\ngoodschools_map <- tm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(top_20_primary_schools_sf) +\n  tm_dots(col = \"red\", size = 0.1) +\n  tm_layout(\n    main.title = \"Good Primary Schools\",\n    main.title.size = 0.8\n  )\n\ntmap_arrange(schools_map, goodschools_map, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-57-1.png){width=1152}\n:::\n:::\n\n\n## Supermarkets\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(supermarkets) +\n  tm_dots(col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n:::\n\n> All locational data looks good based on the visualizations above, so let’s move on to working with our HDB resale data.\n\n# Data Wrangling\n\nIn the previous section, we filtered the data to include only the desired period and retrieved geolocation information based on addresses using the `get_coords` function. Now, we’ll process both structural and locational factors in this data before creating our model.\n\n## Structural Factors\n\n### Floor Level\n\nLet’s take a look at the `storey_range` column in our `hdb_resale` data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(hdb_resale$storey_range)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"16 TO 18\" \"04 TO 06\" \"10 TO 12\" \"13 TO 15\" \"19 TO 21\" \"07 TO 09\"\n [7] \"34 TO 36\" \"22 TO 24\" \"01 TO 03\" \"25 TO 27\" \"37 TO 39\" \"31 TO 33\"\n[13] \"40 TO 42\" \"28 TO 30\" \"43 TO 45\"\n```\n\n\n:::\n:::\n\n\nTypically, higher-floor units command higher prices. However, our data represents floor levels in the \"storey_range\" column as strings, such as \"01 TO 03,\" \"04 TO 06,\" and \"07 TO 09.\" To make this more usable, we’ll create a new numeric attribute that captures the midpoint of each range.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale <- hdb_resale %>%\n  mutate(\n    floor_level = (as.numeric(str_extract(storey_range, \"^[0-9]+\")) +\n                     as.numeric(str_extract(storey_range, \"[0-9]+$\"))) / 2\n  )\n```\n:::\n\n\n### Remaining Lease & Unit's Age\n\nThe `remaining_lease` column is currently in string format, but we need it as a numeric value so we can use it in our model later. From this, we’ll also calculate the unit’s age.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale <- hdb_resale %>%\n  mutate(\n    remaining_lease_years = as.integer(str_sub(remaining_lease, 0, 2)),\n    remaining_lease_months = as.integer(str_sub(remaining_lease, 9, 11)),\n    \n    # Replace NA in months with 0 if \"months\" part is missing\n    remaining_lease_months = if_else(is.na(remaining_lease_months), 0, remaining_lease_months),\n    \n    # Calculate remaining lease in decimal years\n    remaining_lease = remaining_lease_years + (remaining_lease_months / 12),\n    \n    # Calculate unit age based on a 99-year lease\n    unit_age = 99 - remaining_lease\n  ) %>%\n  select(-remaining_lease_years, -remaining_lease_months)\n```\n:::\n\n\n## Locational Factors\n\n### Proximity Calculation\n\nWe need to calculate the proximity of HDB flats to relevant facilities. We’re grateful to have functions provided by Megan, which help streamline this process.\n\nThe `proximity` function calculates the minimum distance from each feature in `df1` to the nearest feature in `df2` and assigns this distance to a new column specified by `varname`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproximity <- function(df1, df2, varname) {\n  dist_matrix <- st_distance(df1, df2) %>%\n    drop_units()\n  df1[,varname] <- rowMins(dist_matrix)\n  return(df1)\n}\n```\n:::\n\n\n::: {.callout-note appearance=\"minimal\"}\nOne of the proximities we need to calculate is the distance to the CBD. For this, we’ll use Raffles Place MRT station as the central reference point from the train stations data.\n:::\n\nLet's calculate the proximity of following facilities:\n\n-   Proxomity to CBD\n-   Proximity to eldercare\n-   Proximity to hawker centres\n-   Proximity to MRT\n-   Proximity to park\n-   Proximity to good primary school\n-   Proximity to shopping mall\n-   Proximity to supermarket\n-   Proximity to hospital\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbd_sf <- filter(train_stations, STN_NAM_DE == \"RAFFLES PLACE MRT STATION\")\nhdb_resale <- proximity(hdb_resale, cbd_sf, \"PROX_CBD\") %>%\n  proximity(., eldercare, \"PROX_ELDERCARE\") %>%\n  proximity(., hawker_center, \"PROX_HAWKER\") %>%\n  proximity(., train_stations, \"PROX_MRT\") %>%\n  proximity(., parks, \"PROX_PARK\") %>%\n  proximity(., top_20_primary_schools_sf, \"PROX_TOPPRISCH\") %>%\n  proximity(., malls, \"PROX_MALL\") %>%\n  proximity(., supermarkets, \"PROX_SPRMKT\") %>%\n  proximity(., hospital_sf, \"PROX_HOSPITAL\")\n```\n:::\n\n\n### Facility Count within Radius Calculation\n\nWe also need to calculate the number of facilities within a certain radius from the resale flats. Thankfully, Megan has wrote a function that we can reuse in this exercise. The `count_in_radius` function calculates the number of features in `df2` that are within a specified `radius` of each feature in `df1` using `st_distance`. It computes the distance matrix between `df1` and `df2`, checks if each distance is within the `radius`, and sums these counts in a new column in `df1` (specified by `varname`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_in_radius <- function(df1, df2, varname, radius) {\n  dist_matrix <- st_distance(df1, df2) %>%\n    drop_units() %>%\n    as.data.frame()\n  df1[,varname] <- rowSums(dist_matrix <= radius)\n  return(df1)\n}\n```\n:::\n\n\nLet's calculate the following:\n\n-   Numbers of kindergartens within 350m\n-   Numbers of childcare centres within 350m\n-   Numbers of bus stop within 350m\n-   Numbers of CHAS clinics within 350m\n-   Numbers of primary school within 1km\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale <- count_in_radius(hdb_resale, kindergartens, \"NUM_KNDRGTN\", 350) %>%\n  count_in_radius(., childcare, \"NUM_CHILDCARE\", 350) %>%\n  count_in_radius(., bus_stops, \"NUM_BUS_STOP\", 350) %>%\n  count_in_radius(., chas, \"NUM_CHAS\", 350) %>%\n  count_in_radius(., primary_schools_sf, \"NUM_PRISCH\", 1000)\n```\n:::\n\n\nWe will filter out unnecessary columns and save the results to avoid recalculating them during rendering.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale <- hdb_resale %>%\n  rename(\n    MONTH = month,\n    TOWN = town,\n    FLOOR_AREA_SQM = floor_area_sqm,\n    ADDRESS = address,\n    RESALE_PRICE = resale_price,\n    FLOOR_LEVEL = floor_level,\n    REMAINING_LEASE = remaining_lease,\n    UNIT_AGE = unit_age\n  ) %>%\n  select(MONTH, TOWN, FLOOR_AREA_SQM, ADDRESS, RESALE_PRICE, FLOOR_LEVEL, REMAINING_LEASE,\n         UNIT_AGE, PROX_CBD, PROX_ELDERCARE, PROX_HAWKER, PROX_MRT, PROX_PARK,\n         PROX_TOPPRISCH, PROX_MALL, PROX_SPRMKT, PROX_HOSPITAL, NUM_KNDRGTN,\n         NUM_CHILDCARE, NUM_BUS_STOP, NUM_CHAS, NUM_PRISCH)\n\nwrite_rds(hdb_resale, \"data/rds/final_hdb_resale.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n# Exploratory Data Analysis\n\nLet's explore and analyze the dataset before starting to build our model.\n\n## Resale Price\n\nWe’ll start by visualizing the distribution of resale prices.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hdb_resale, aes(x=RESALE_PRICE)) +\n  geom_histogram(bins = 20, color = \"black\", fill = \"lightblue\")\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-68-1.png){width=672}\n:::\n:::\n\n\nFrom the graph above, we can see that for 5-room HDB flats:\n\n-   The distribution of resale prices is right-skewed.\n-   Most resale HDBs are transacted around the \\$500,000–\\$600,000 range.\n-   Outliers are present, with some HDB prices reaching close to \\$1 million or more.\n\n> Statistically, the skewed distribution can be normalized by using a log transformation. However, we’ll not apply it here because we want to retain the original scale of resale prices for easier interpretation and comparison.\n\nWe can also visualize the geospatial distribution of resale prices for 5-room housing units in Singapore.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz)+\n  tm_polygons(col = \"white\") +\ntm_shape(hdb_resale) +  \n  tm_dots(col = \"RESALE_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\")\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-69-1.png){width=1152}\n:::\n:::\n\n\n> The map shows that HDB flats generally have higher prices near the downtown area. Additionally, prices in the North-East and East regions are noticeably higher than in the North and West, where resale prices tend to be more affordable.\n\n## Locational Factors\n\nWe’ll examine the distribution of our locational factors using `ggplot` for each factor and arrange them with `ggarrange`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPROX_CBD <- ggplot(data = hdb_resale, aes(x = PROX_CBD)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nPROX_ELDERCARE <- ggplot(data = hdb_resale, aes(x = PROX_ELDERCARE)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nPROX_HAWKER <- ggplot(data = hdb_resale, aes(x = PROX_HAWKER)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nPROX_MRT <- ggplot(data = hdb_resale, aes(x = PROX_MRT)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nPROX_PARK <- ggplot(data = hdb_resale, aes(x = PROX_PARK)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nPROX_TOPPRISCH <- ggplot(data = hdb_resale, aes(x = PROX_TOPPRISCH)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nPROX_MALL <- ggplot(data = hdb_resale, aes(x = PROX_MALL)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nPROX_SPRMKT <- ggplot(data = hdb_resale, aes(x = PROX_SPRMKT)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nPROX_HOSPITAL <- ggplot(data = hdb_resale, aes(x = PROX_HOSPITAL)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nNUM_KNDRGTN <- ggplot(data = hdb_resale, aes(x = NUM_KNDRGTN)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nNUM_BUS_STOP <- ggplot(data = hdb_resale, aes(x = NUM_BUS_STOP)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nNUM_CHILDCARE <- ggplot(data = hdb_resale, aes(x = NUM_CHILDCARE)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nNUM_CHAS <- ggplot(data = hdb_resale, aes(x = NUM_CHAS)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nNUM_PRISCH <- ggplot(data = hdb_resale, aes(x = NUM_PRISCH)) + \n  geom_histogram(bins=20, color=\"black\", fill = 'lightblue')\n\nggarrange(PROX_CBD, PROX_ELDERCARE, PROX_HAWKER, PROX_MRT, PROX_PARK, PROX_TOPPRISCH, PROX_MALL, PROX_SPRMKT, PROX_HOSPITAL, NUM_KNDRGTN, NUM_BUS_STOP, NUM_CHILDCARE, NUM_CHAS, NUM_PRISCH, ncol = 3, nrow = 5)\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-70-1.png){width=1152}\n:::\n:::\n\n\n::: callout-note\nThe distribution of `PROX_CBD` is left-skewed, indicating that most HDB flats are relatively far from the Central Business District, with only a few located nearby. In contrast, `NUM_BUS_STOP` shows a more normal distribution, suggesting that bus stops are relatively evenly distributed around HDB flats, with many flats having access to several nearby. The remaining proximity and count variables are generally right-skewed, indicating that while some flats have access to numerous facilities within a certain radius, the majority have fewer nearby amenities, with access decreasing further from these central locations.\n:::\n\n## Structural Factors\n\nNext, we’ll explore the distribution of our structural factors by visualizing each one with `ggplot` and organizing them using `ggarrange`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUNIT_AREA <- ggplot(data=hdb_resale, aes(x= FLOOR_AREA_SQM)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"lightblue\")\n\nUNIT_FLOOR_LEVEL <- ggplot(data=hdb_resale, aes(x= FLOOR_LEVEL)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"lightblue\")\n\nUNIT_REMAINING_LEASE <- ggplot(data=hdb_resale, aes(x= REMAINING_LEASE)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"lightblue\")\n\nUNIT_AGE <- ggplot(data=hdb_resale, aes(x= UNIT_AGE)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"lightblue\")\n\nggarrange(UNIT_AREA, UNIT_FLOOR_LEVEL, UNIT_REMAINING_LEASE, UNIT_AGE, \n          ncol = 2, nrow = 2)\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-71-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nBoth floor area (in square meters) and floor level are right-skewed, indicating that most HDB flats sold are smaller in size and located on lower floors, with fewer transactions historically for larger units or those on higher floors. In contrast, the remaining lease is slightly left-skewed, with most flats retaining a lease duration near the upper limit of 99 years, and only a small number having shorter remaining leases. The distribution of unit age shows a bimodal pattern, with peaks around both newer and older flats, suggesting that sales include a mix of recently built and much older properties.\n:::\n\n## Multicollinearity Analysis\n\nIn this section, we’ll analyze the dataset for multicollinearity, where predictor variables are highly correlated. Identifying multicollinearity helps improve model stability and interpretability.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale_nogeo <- hdb_resale %>%\n  st_drop_geometry()\nggcorrmat(hdb_resale_nogeo, names(hdb_resale_nogeo))\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-72-1.png){width=1152}\n:::\n:::\n\n\n::: callout-note\nThe correlation matrix shows a strong negative correlation between `UNIT_AGE` and `REMAINING_LEASE`, as expected, since `UNIT_AGE` is derived from `REMAINING_LEASE`; one of these can be removed to avoid multicollinearity. Resale price has moderate positive correlations with `FLOOR_AREA_SQM` (0.63) and `FLOOR_LEVEL` (0.45), suggesting that larger and higher-floor units tend to be more expensive. Most other variables show low or no significant correlations.\n:::\n\n# Multiple Linear Regression\n\n## Prepare Train and Test Data\n\nBefore creating our model, we’ll split the HDB resale dataset into training and test sets. Resale transactions from 2023 will be used for training, while the remaining data will be used for testing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale_train <- hdb_resale %>%\n  filter(str_sub(MONTH, 1, 4) == \"2023\")\n\nhdb_resale_test <- hdb_resale %>%\n  filter(str_sub(MONTH, 1, 4) != \"2023\")\n```\n:::\n\n\n## Calibrate Multiple Linear Regression Model\n\nWe’ll use the `lm()` function to fit a multiple linear regression model, incorporating the selected independent variables to predict the dependent variable. We’ll also apply `ols_regress` on the model for\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_mlr <- lm(formula = RESALE_PRICE ~ FLOOR_AREA_SQM + FLOOR_LEVEL + REMAINING_LEASE +\n                     PROX_CBD + PROX_ELDERCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +\n                     PROX_TOPPRISCH + PROX_MALL + PROX_SPRMKT + PROX_HOSPITAL + NUM_KNDRGTN +\n                     NUM_CHILDCARE + NUM_BUS_STOP + NUM_CHAS + NUM_PRISCH, \n                data=hdb_resale_train)\nols_regress(resale_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                              Model Summary                                \n--------------------------------------------------------------------------\nR                           0.853       RMSE                    73652.485 \nR-Squared                   0.728       MSE                5441451470.022 \nAdj. R-Squared              0.728       Coef. Var                  10.764 \nPred R-Squared              0.727       AIC                    147586.040 \nMAE                     54578.193       SBC                    147712.827 \n--------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                    ANOVA                                      \n------------------------------------------------------------------------------\n                    Sum of                                                    \n                   Squares          DF       Mean Square       F         Sig. \n------------------------------------------------------------------------------\nRegression    8.501878e+13          17      5.001105e+12    919.076    0.0000 \nResidual      3.169645e+13        5825    5441451470.022                      \nTotal         1.167152e+14        5842                                        \n------------------------------------------------------------------------------\n\n                                            Parameter Estimates                                              \n------------------------------------------------------------------------------------------------------------\n          model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n------------------------------------------------------------------------------------------------------------\n    (Intercept)    -287580.326     28115.034                 -10.229    0.000    -342696.231    -232464.420 \n FLOOR_AREA_SQM       6561.317       181.342        0.332     36.182    0.000       6205.818       6916.816 \n    FLOOR_LEVEL       6563.971       172.847        0.277     37.976    0.000       6225.126       6902.815 \nREMAINING_LEASE       6510.972       110.271        0.559     59.045    0.000       6294.801       6727.144 \n       PROX_CBD        -21.324         0.402       -0.598    -53.061    0.000        -22.112        -20.536 \n PROX_ELDERCARE         -5.460         1.799       -0.025     -3.034    0.002         -8.987         -1.932 \n    PROX_HAWKER        -29.545         1.991       -0.115    -14.842    0.000        -33.447        -25.642 \n       PROX_MRT        -41.105         3.057       -0.108    -13.447    0.000        -47.098        -35.113 \n      PROX_PARK         -1.948         2.453       -0.006     -0.794    0.427         -6.757          2.861 \n PROX_TOPPRISCH          1.631         0.530        0.029      3.078    0.002          0.592          2.670 \n      PROX_MALL        -12.577         3.328       -0.030     -3.779    0.000        -19.100         -6.053 \n    PROX_SPRMKT          9.954         6.882        0.011      1.446    0.148         -3.537         23.445 \n  PROX_HOSPITAL          2.133         0.914        0.020      2.334    0.020          0.342          3.924 \n    NUM_KNDRGTN       8111.601      1063.282        0.062      7.629    0.000       6027.173      10196.029 \n  NUM_CHILDCARE      -4036.410       514.169       -0.068     -7.850    0.000      -5044.372      -3028.448 \n   NUM_BUS_STOP        371.925       344.524        0.008      1.080    0.280       -303.471       1047.320 \n       NUM_CHAS       7425.302       537.428        0.109     13.816    0.000       6371.744       8478.860 \n     NUM_PRISCH      -9707.602       743.959       -0.113    -13.049    0.000     -11166.038      -8249.166 \n------------------------------------------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\n::: callout-note\nLooking at the parameter estimates, several factors stand out as significant predictors. `FLOOR_AREA_SQM` and `REMAINING_LEASE` have large positive coefficients, indicating that larger floor areas and longer leases are strong drivers of higher resale prices. `FLOOR_LEVEL` also contributes positively, suggesting that units on higher floors tend to be more valuable.\n\nA few variables exhibit high p-values, suggesting they do not significantly impact resale prices in this model. These include `NUM_BUS_STOP`, `PROX_SPRMKT`, and `PROX_PARK`. We will remove these predictors and recalibrating the model to see if it improves the model’s performance and interpretability.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_mlr <- lm(formula = RESALE_PRICE ~ FLOOR_AREA_SQM + FLOOR_LEVEL + REMAINING_LEASE +\n                     PROX_CBD + PROX_ELDERCARE + PROX_HAWKER + PROX_MRT +\n                     PROX_TOPPRISCH + PROX_MALL + PROX_HOSPITAL + NUM_KNDRGTN +\n                     NUM_CHILDCARE + NUM_CHAS + NUM_PRISCH, \n                data=hdb_resale_train)\nols_regress(resale_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                              Model Summary                                \n--------------------------------------------------------------------------\nR                           0.853       RMSE                    73677.133 \nR-Squared                   0.728       MSE                5442291241.733 \nAdj. R-Squared              0.728       Coef. Var                  10.765 \nPred R-Squared              0.727       AIC                    147583.950 \nMAE                     54561.661       SBC                    147690.718 \n--------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                      \n-------------------------------------------------------------------------------\n                    Sum of                                                     \n                   Squares          DF       Mean Square       F          Sig. \n-------------------------------------------------------------------------------\nRegression    8.499756e+13          14      6.071255e+12     1115.57    0.0000 \nResidual      3.171767e+13        5828    5442291241.733                       \nTotal         1.167152e+14        5842                                         \n-------------------------------------------------------------------------------\n\n                                            Parameter Estimates                                              \n------------------------------------------------------------------------------------------------------------\n          model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n------------------------------------------------------------------------------------------------------------\n    (Intercept)    -276953.384     27592.764                 -10.037    0.000    -331045.440    -222861.327 \n FLOOR_AREA_SQM       6529.004       180.357        0.330     36.200    0.000       6175.437       6882.572 \n    FLOOR_LEVEL       6571.950       172.695        0.277     38.055    0.000       6233.404       6910.497 \nREMAINING_LEASE       6480.299       109.106        0.557     59.394    0.000       6266.410       6694.188 \n       PROX_CBD        -21.298         0.389       -0.597    -54.765    0.000        -22.060        -20.536 \n PROX_ELDERCARE         -5.506         1.748       -0.025     -3.149    0.002         -8.933         -2.078 \n    PROX_HAWKER        -29.775         1.969       -0.116    -15.120    0.000        -33.635        -25.914 \n       PROX_MRT        -41.084         3.040       -0.108    -13.514    0.000        -47.043        -35.124 \n PROX_TOPPRISCH          1.486         0.516        0.026      2.882    0.004          0.475          2.498 \n      PROX_MALL        -12.328         3.225       -0.030     -3.823    0.000        -18.649         -6.007 \n  PROX_HOSPITAL          2.406         0.897        0.023      2.681    0.007          0.647          4.165 \n    NUM_KNDRGTN       8123.408      1061.878        0.062      7.650    0.000       6041.732      10205.083 \n  NUM_CHILDCARE      -3988.427       507.203       -0.068     -7.864    0.000      -4982.733      -2994.121 \n       NUM_CHAS       7244.875       508.355        0.106     14.252    0.000       6248.311       8241.440 \n     NUM_PRISCH      -9754.911       740.932       -0.114    -13.166    0.000     -11207.412      -8302.411 \n------------------------------------------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\n> After removing `NUM_BUS_STOP`, `PROX_SPRMKT`, and `PROX_PARK`, all remaining variables are now statistically significant.\n\n## Multicollinearity Check\n\nNext, we’ll run `ols_vif_tol` on the model to check for multicollinearity. Identifying multicollinearity is important because multicollinearity can inflate the variance of coefficient estimates, making the model less reliable and harder to interpret.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols_vif_tol(resale_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Variables Tolerance      VIF\n1   FLOOR_AREA_SQM 0.5607675 1.783270\n2      FLOOR_LEVEL 0.8778497 1.139147\n3  REMAINING_LEASE 0.5308417 1.883801\n4         PROX_CBD 0.3924173 2.548307\n5   PROX_ELDERCARE 0.7217715 1.385480\n6      PROX_HAWKER 0.7928210 1.261319\n7         PROX_MRT 0.7310426 1.367909\n8   PROX_TOPPRISCH 0.5572408 1.794556\n9        PROX_MALL 0.7809256 1.280532\n10   PROX_HOSPITAL 0.6347824 1.575343\n11     NUM_KNDRGTN 0.7117069 1.405073\n12   NUM_CHILDCARE 0.6304616 1.586140\n13        NUM_CHAS 0.8392599 1.191526\n14      NUM_PRISCH 0.6272019 1.594383\n```\n\n\n:::\n:::\n\n\n> The VIF values in the output are all below 5, which suggests that multicollinearity is not a significant issue in the model. Each predictor variable has a relatively low VIF, indicating minimal correlation with the other predictors. This means the model's coefficients are likely to be stable and reliable, with each variable contributing independently to the prediction of the resale price.\n\n## Test for Non-Linearity\n\nIn multiple linear regression, it's important to test the assumption of linearity and additivity in the relationship between the dependent and independent variables. We’ll use `ols_plot_resid_fit()` from the `olsrr` package to check the linearity assumption.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols_plot_resid_fit(resale_mlr)\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-77-1.png){width=672}\n:::\n:::\n\n\n> We observed that the data points are scattered around the zero line, with some outliers. We can conclude that the relationships between the dependent variable and independent variables are approximately linear.\n\n## Test for Normality\n\nWe can use [`ols_plot_resid_hist()`](https://olsrr.rsquaredacademy.com/reference/ols_plot_resid_hist.html) from the *olsrr* package to test the normality assumption. Testing for normality is important because, in linear regression, normally distributed residuals indicate that the model’s predictions are unbiased and the statistical inferences (like confidence intervals and p-values) are valid.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols_plot_resid_hist(resale_mlr)\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-78-1.png){width=672}\n:::\n:::\n\n\n> The residual histogram shows that the residuals are roughly centered around zero and follow an approximate bell shape. This supports the normality assumption, with minor deviations that are unlikely to impact the model's validity.\n\n## Test for Spatial Autocorrelation\n\nSince the hedonic model uses geographically referenced attributes, it's important to examine the spatial distribution of its residuals. We’ll take the residuals from the model and merge them with `hdb_resale_train` to visualize any potential spatial autocorrelation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmlr_res <- as.data.frame(resale_mlr$residuals)\n\nresale_res <- cbind(hdb_resale_train,\n                    mlr_res) %>%\n  rename(MLR_RES = resale_mlr.residuals)\n\ntm_shape(mpsz)+\n  tm_polygons(col = \"white\") +\ntm_shape(resale_res) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_layout(main.title = \"Multiple Linear Regression Residuals\",     \n            main.title.position = \"center\",\n            main.title.size = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-79-1.png){width=672}\n:::\n:::\n\n\n> The map shows spatial patterns in the model's residuals, suggesting potential spatial autocorrelation.\n\nTo statistically confirm our observation of spatial autocorrelation, we’ll perform Moran’s I Test. The steps are as follows:\n\n1.  Use `dnearneigh()` from the **spdep** package to create a distance-based weight matrix.\n2.  Convert the neighbor list (`nb`) into spatial weights.\n3.  Conduct Moran’s I Test to assess spatial autocorrelation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_sp <- as_Spatial(resale_res)\n\nnb <- dnearneigh(coordinates(resale_sp), 0, 1500, longlat = FALSE)\nnb_lw <- nb2listw(nb, style = 'W')\n\nlm.morantest(resale_mlr, nb_lw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGlobal Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = RESALE_PRICE ~ FLOOR_AREA_SQM + FLOOR_LEVEL +\nREMAINING_LEASE + PROX_CBD + PROX_ELDERCARE + PROX_HAWKER + PROX_MRT +\nPROX_TOPPRISCH + PROX_MALL + PROX_HOSPITAL + NUM_KNDRGTN +\nNUM_CHILDCARE + NUM_CHAS + NUM_PRISCH, data = hdb_resale_train)\nweights: nb_lw\n\nMoran I statistic standard deviate = 224.14, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    3.030779e-01    -1.203103e-03     1.842874e-06 \n```\n\n\n:::\n:::\n\n\n> The Global Moran’s I test for residual spatial autocorrelation shows a p-value less than the alpha value of 0.05, so we reject the null hypothesis that the residuals are randomly distributed. Since the observed Global Moran’s I is greater than 0, we can infer that the residuals exhibit a clustered distribution.\n\n# Geographically Weighted Random Forest\n\n## Data Preparation\n\nBefore calibrating the random forest model, we need coordinate data that is needed by the SpatialML package. We can obtain this using `st_coordinates()` from the **sf** package. Then, we’ll remove the geometry data from `hdb_resale_train` with `st_drop_geometry()` to create an aspatial dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train <- st_coordinates(hdb_resale_train)\n\nhdb_resale_train_nogeo <- hdb_resale_train %>% \n  st_drop_geometry()\n```\n:::\n\n\n## Compute Optimum Bandwidth\n\nWe need to determine the optimal bandwidth for our geographically weighted random forest model. We’ll use an adaptive bandwidth because it allows the bandwidth to vary depending on the density of data points, providing more flexibility in areas with sparse data. For this, we’ll use a cross-validation (CV) approach with the `bw.gwr()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- bw.gwr(formula = RESALE_PRICE ~ FLOOR_AREA_SQM + FLOOR_LEVEL + REMAINING_LEASE +\n                     PROX_CBD + PROX_ELDERCARE + PROX_HAWKER + PROX_MRT +\n                     PROX_TOPPRISCH + PROX_MALL + PROX_HOSPITAL + NUM_KNDRGTN +\n                     NUM_CHILDCARE + NUM_CHAS + NUM_PRISCH,\n                      data=resale_sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nwrite_rds(bw_adaptive, \"data/model/bw_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- read_rds(\"data/model/bw_adaptive.rds\")\nbw_adaptive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 40\n```\n\n\n:::\n:::\n\n\n> The optimal bandwidth for this dataset is 40.\n\n## Calibrate Geographically Weighted Random Forest Model\n\nUsing the adaptive bandwidth calculated earlier, we can build a Geographically Weighted Random Forest model with `grf()` from the **SpatialML** package. We’ll specify the target variable, predictors, data frame (excluding coordinates), kernel type, and coordinates as a separate data frame. To save time during rendering, we’ll also save the model for future use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\n\ngwRF_adaptive <- grf(formula = RESALE_PRICE ~ FLOOR_AREA_SQM + FLOOR_LEVEL + REMAINING_LEASE +\n                     PROX_CBD + PROX_ELDERCARE + PROX_HAWKER + PROX_MRT +\n                     PROX_TOPPRISCH + PROX_MALL + PROX_HOSPITAL + NUM_KNDRGTN +\n                     NUM_CHILDCARE + NUM_CHAS + NUM_PRISCH,\n                     dframe=hdb_resale_train_nogeo, \n                     bw = bw_adaptive,\n                     ntree = 200,\n                     kernel=\"adaptive\",\n                     verbose = TRUE,\n                     coords=coords_train)\n\nwrite_rds(gwRF_adaptive, \"data/model/gwRF_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nLet's take a look at the importance of parameters from the geographically weighted random forest model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable_importance <- gwRF_adaptive$Global.Model$variable.importance\nsort(variable_importance, decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       PROX_CBD REMAINING_LEASE     FLOOR_LEVEL  PROX_TOPPRISCH  FLOOR_AREA_SQM \n   3.593875e+13    2.243939e+13    1.218517e+13    8.940477e+12    6.668454e+12 \n    PROX_HAWKER   PROX_HOSPITAL        PROX_MRT  PROX_ELDERCARE       PROX_MALL \n   5.518551e+12    4.812411e+12    4.355106e+12    3.646059e+12    3.523533e+12 \n       NUM_CHAS      NUM_PRISCH   NUM_CHILDCARE     NUM_KNDRGTN \n   3.261348e+12    2.206698e+12    1.132586e+12    8.993930e+11 \n```\n\n\n:::\n:::\n\n\n::: {.callout-note appearance=\"simple\"}\nWe can see the top five parameters by importance in the geographically weighted random forest model are:\n\n-   **PROX_CBD**: Proximity to the Central Business District (CBD)\n-   **REMAINING_LEASE**: Remaining lease duration of the property\n-   **FLOOR_LEVEL**: Floor level of the unit\n-   **PROX_TOPPRISCH**: Proximity to top primary schools\n-   **FLOOR_AREA_SQM**: Floor area in square meters\n:::\n\n# Model Evaluation\n\nIn this section, we will evaluate the models we calibrated earlier (Multiple Linear Regression and Geographically Weighted Random Forest).\n\n## Prepare Test Data\n\nFirst, let's prepare the test data, which includes transactions from July to September 2024. Similar to the training data, we need coordinate data required by the SpatialML package. We can obtain this using `st_coordinates()` from the **sf** package. Then, we’ll remove the geometry data from `hdb_resale_test` using `st_drop_geometry()` to create an aspatial dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_test <- st_coordinates(hdb_resale_test)\n\nhdb_resale_test_nogeo <- cbind(hdb_resale_test, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n## Model Predictions on Test Data\n\n### Multiple Linear Regression\n\nWe’ll use the Multiple Linear Regression model to make predictions on the test data with `predict()` functions, then store the results in `PREDICT_MLR` within `hdb_resale_test`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale_test$PREDICT_MLR <- predict(object = resale_mlr, newdata = hdb_resale_test)\n```\n:::\n\n\n### Geographically Weighted Random Forest\n\nWe’ll also use the Geographically Weighted Random Forest model to make predictions with `predict.grf()` function, then store the results in `PREDICT_GWRF` within `hdb_resale_test`. Finally, we'll save `hdb_resale_test` as an RDS file to preserve the predictions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale_test$PREDICT_GWRF <- predict.grf(gwRF_adaptive,\n                                            hdb_resale_test_nogeo, \n                                            x.var.name=\"X\",\n                                            y.var.name=\"Y\", \n                                            local.w=1,\n                                            global.w=0)\nwrite_rds(hdb_resale_test, \"data/rds/hdb_resale_test_pred.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Calculate Root Mean Square Error (RMSE)\n\nWe’ll use RMSE as the metric to compare the prediction performance of both models. The RMSE can be calculated with the `rmse()` function from the **Metrics** package. After calculating the RMSE for each model, we’ll store the results in a data frame and display them in a table format for easy comparison.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_mlr <- rmse(hdb_resale_test$RESALE_PRICE, hdb_resale_test$PREDICT_MLR)\nrmse_gwrf <- rmse(hdb_resale_test$RESALE_PRICE, hdb_resale_test$PREDICT_GWRF)\n\nrmse_results <- data.frame(\n  Model = c(\"Multiple Linear Regression\", \"Geographically Weighted Random Forest\"),\n  RMSE = c(rmse_mlr, rmse_gwrf)\n)\n\nknitr::kable(rmse_results, caption = \"RMSE Comparison of Model Predictions\")\n```\n\n::: {.cell-output-display}\n\n\nTable: RMSE Comparison of Model Predictions\n\n|Model                                 |     RMSE|\n|:-------------------------------------|--------:|\n|Multiple Linear Regression            | 97605.86|\n|Geographically Weighted Random Forest | 72074.30|\n\n\n:::\n:::\n\n\n> We observe that the Geographically Weighted Random Forest model has a lower RMSE than the Multiple Linear Regression model, indicating better predictive performance on the test data. This suggests that incorporating geographic variation improves accuracy in predicting HDB resale prices.\n\n## Model Predictions Visualization\n\nWe can visualize the predictions of both models against actual sale prices using scatterplots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_mlr <- ggplot(data = hdb_resale_test,\n                   aes(x = PREDICT_MLR,\n                       y = RESALE_PRICE)) +\n  geom_point() + \n  ggtitle(\"Resale Price vs Predicted Price (MLR)\")\n\nplot_gwrf <- ggplot(data = hdb_resale_test,\n                    aes(x = PREDICT_GWRF,\n                        y = RESALE_PRICE)) +\n  geom_point() + \n  ggtitle(\"Resale Price vs Predicted Price (GWRF)\")\n\nggarrange(plot_mlr, plot_gwrf, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-92-1.png){width=1152}\n:::\n:::\n\n\n> The Geographically Weighted Random Forest (GWRF) model shows predictions more tightly clustered along the diagonal line, indicating better accuracy. In contrast, the Multiple Linear Regression (MLR) model has a wider spread, especially at higher prices, aligning with the RMSE results that favor the GWRF model.\n\n## Visualization of Model Residuals\n\nWe can visualize the residuals of the model predictions on the test set to compare the accuracy of the Multiple Linear Regression and Geographically Weighted Random Forest models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhdb_resale_test <- hdb_resale_test %>%\n  mutate(MLR_RES = RESALE_PRICE - PREDICT_MLR,\n         GWRF_RES = RESALE_PRICE - PREDICT_GWRF)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncommon_breaks <- c(-Inf, seq(-400000, 400000, by = 200000), Inf)\n\nbase_map <- tm_shape(mpsz) +\n  tm_polygons(col = \"white\") +\n  tm_shape(hdb_resale_test)\n\nmlr_res_map <- base_map +\n  tm_dots(\"MLR_RES\",\n          breaks = common_breaks,\n          palette = \"Spectral\",\n          size = 0.1) +\n  tm_layout(\n    main.title = \"Multiple Linear Regression Residuals\",\n    main.title.size = 0.8\n  ) +\n  tm_view(set.zoom.limits = c(10, 12))\n\ngwrf_res_map <- base_map +\n  tm_dots(\"GWRF_RES\",\n          breaks = common_breaks,\n          palette = \"Spectral\",\n          size = 0.1) +\n  tm_layout(\n    main.title = \"GW Random Forest Residuals\",\n    main.title.size = 0.8\n  ) +\n  tm_view(set.zoom.limits = c(10, 12))\n\ntmap_arrange(mlr_res_map, gwrf_res_map, ncol = 2, sync = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"GWRF_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex03_files/figure-html/unnamed-chunk-94-1.png){width=1152}\n:::\n:::\n\n\n> The maps highlight the residual patterns for both models. The Multiple Linear Regression (MLR) model shows larger residuals (in red and blue) in certain areas, indicating greater prediction errors. In contrast, the Geographically Weighted Random Forest (GWRF) model displays a more balanced distribution with fewer large residuals, suggesting improved accuracy in capturing local price variations across different regions.\n\n# Conclusion\n\nIn conclusion, this analysis aimed to predict HDB resale prices by incorporating structural and locational factors. By leveraging both traditional regression and spatially-aware machine learning techniques, we examined the influence of geographic and property-specific variables on housing prices in Singapore.\n\nData preprocessing focused on engineering structural and locational factors and calculating proximity metrics for key amenities such as MRT stations, childcare centers, and primary schools. We also accounted for spatial autocorrelation, which revealed clustering in the residuals, validating our choice to incorporate a geographically weighted approach.\n\nThe Multiple Linear Regression (MLR) model provided a useful baseline for understanding the relationships between independent variables and resale prices. However, the MLR model struggled with capturing localized price variations, leading to larger residuals in areas with unique market characteristics. In contrast, the Geographically Weighted Random Forest (GWRF) model, which used adaptive bandwidths to account for geographic influences, showed a lower RMSE on the test set and a more balanced residual distribution across regions. This outcome demonstrates the GWRF model’s ability to adapt to spatial variations, resulting in greater accuracy by acknowledging that price drivers vary by location.\n\nIt is worth noting that additional factors may influence flat prices but were not included in this study. External variables such as government housing policies, economic conditions, interest rates, and demographic shifts could also play significant roles in shaping resale prices. Future models that incorporate these broader market and policy factors may yield even greater accuracy.\n\nIn summary, this study demonstrates the value of incorporating geographic factors into predictive models for housing prices. The GWRF model’s performance suggests that spatially weighted approaches can enhance model accuracy, particularly in geographically diverse markets like Singapore’s.\n\n# Reference\n\n-   Housing & Development Board. (n.d.). *How BTO Flats are Priced*. Retrieved from <https://www.hdb.gov.sg/cs/infoweb/about-us/news-and-publications/publications/hdbspeaks/How-BTO-Flats-are-Priced>\n\n-   Megan Sim's IS415 Take-Home Exercise 3. (October 2021). In *IS415-GAA*. Retrieved from <https://is415-msty.netlify.app/posts/2021-10-25-take-home-exercise-3/>\n",
    "supporting": [
      "take_home_ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}