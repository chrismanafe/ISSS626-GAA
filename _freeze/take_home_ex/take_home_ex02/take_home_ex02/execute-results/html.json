{
  "hash": "55aa9e37ed6b6089192f9df96c581e97",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 2: Discovering impacts of COVID-19 on Thailand tourism economy at the province level using spatial and spatio-temporal statistics\"\nauthor: \"Christover Manafe\"\ndate: \"2024-10-01\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\nformat: \n  html:\n    code-fold: false\n    code-summary: \"code chunk\"\n    number-sections: true\n    number-depth: 4\n---\n\n\n# Overview\n\nTourism is one of Thailand’s largest industries, contributing approximately 20% to the country's gross domestic product (GDP). In 2019, Thailand generated 90 billion US dollars from both domestic and international tourism, but this figure plummeted to 24 billion US dollars in 2020 due to the COVID-19 pandemic.\n\nSince September 2021, the tourism sector has been steadily recovering. However, it’s important to note that the tourism economy in Thailand is not evenly distributed across the country, with much of the activity concentrated in key provinces such as Bangkok, Phuket, and Chiang Mai.\n\n# Objectives\n\nThis exercise aims to:\n\n1.  Determine whether the key indicators of Thailand's tourism economy are independent of spatial and spatio-temporal factors.\n\n2.  If dependencies are identified, the goal is to locate clusters and outliers, and detect emerging hot spots and cold spots in the tourism economy.\n\n# Getting Started\n\n## The Packages\n\nIn this exercise, we will use following packages:\n\n+---------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Package                                                             | Description                                                                                                                                                                                                          |\n+=====================================================================+======================================================================================================================================================================================================================+\n| [**sf**](https://r-spatial.github.io/sf/)                           | Provides functions to manage, processing, and manipulate **Simple Features**, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons. |\n+---------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**sfdep**](https://cran.r-project.org/web/packages/sfdep/)         | Provides collection of functions to create spatial weights matrix objects from polygon 'contiguities', from point patterns by distance and tessellations.                                                            |\n+---------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**tidyverse**](https://www.tidyverse.org/)                         | Provides collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data.                                                                                   |\n+---------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**tmap**](https://cran.r-project.org/web/packages/tmap/)           | Provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API                                                                   |\n+---------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**corrplot**](https://cran.r-project.org/web/packages/corrplot/)   | Provides functions for visualizing correlation matrices.                                                                                                                                                             |\n+---------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [**heatmaply**](https://cran.r-project.org/web/packages/heatmaply/) | Provides an easy-to-use interface for creating interactive heatmaps.                                                                                                                                                 |\n+---------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n: {tbl-colwidths=\"\\[15,85\\]\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, tidyverse, corrplot, heatmaply)\n```\n:::\n\n\n## The Data\n\n+--------------------------------------------------+--------------------------------------------------------------------------------+----------------+---------------------------------------------------------------------------------------------+\n| **Dataset Name**                                 | **Description**                                                                | **Format**     | **Source**                                                                                  |\n+==================================================+================================================================================+================+=============================================================================================+\n| Thailand Domestic Tourism Statistics             | Monthly Provincial Data on Tourist Numbers, Occupancy, and Revenue in Thailand | CSV            | [Kaggle](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) |\n|                                                  |                                                                                |                |                                                                                             |\n| \\[2019-2023\\]                                    |                                                                                |                |                                                                                             |\n+--------------------------------------------------+--------------------------------------------------------------------------------+----------------+---------------------------------------------------------------------------------------------+\n| Thailand - Subnational Administrative Boundaries | Administrative boundary data for Thailand's subnational divisions              | ESRI Shapefile | [Humanitarian Data Exchange (HDX)](https://data.humdata.org/dataset/cod-ab-tha?)            |\n+--------------------------------------------------+--------------------------------------------------------------------------------+----------------+---------------------------------------------------------------------------------------------+\n\n## Importing Datasets to R environment\n\n### Thailand Domestic Tourism Statistics\n\nWe will load Thailand Domestic Tourism Statistics data using [read_csv()](https://readr.tidyverse.org/reference/read_delim.html) function of **readr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- read_csv(\"data/aspatial/thailand_domestic_tourism_2019_2023_ver2.csv\") %>%\n  pivot_wider(names_from = variable, values_from = value) %>%\n  select(1,3,5:13)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 30800 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): province_thai, province_eng, region_thai, region_eng, variable\ndbl  (1): value\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(tourism)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,850\nColumns: 11\n$ date               <date> 2019-01-01, 2019-01-01, 2019-01-01, 2019-01-01, 20…\n$ province_eng       <chr> \"Bangkok\", \"Lopburi\", \"Phra Nakhon Si Ayutthaya\", \"…\n$ region_eng         <chr> \"central\", \"central\", \"central\", \"central\", \"centra…\n$ ratio_tourist_stay <dbl> 93.37, 61.32, 73.37, 67.33, 79.31, 71.70, 64.65, 71…\n$ no_tourist_stay    <dbl> 3334971, 51858, 117052, 89850, 27141, 118629, 18147…\n$ no_tourist_all     <dbl> 5959075, 268664, 730329, 207236, 79073, 296107, 494…\n$ no_tourist_thai    <dbl> 3534061, 266301, 561553, 201400, 78514, 284408, 491…\n$ no_tourist_foreign <dbl> 2425014, 2363, 168776, 5836, 559, 11699, 248, 5281,…\n$ revenue_all        <dbl> 81926490000, 457240000, 1438730000, 347790000, 1017…\n$ revenue_thai       <dbl> 29742580000, 451830000, 1054250000, 336190000, 1009…\n$ revenue_foreign    <dbl> 52183910000, 5410000, 384480000, 11600000, 890000, …\n```\n\n\n:::\n:::\n\n\n::: {.callout-note appearance=\"simple\"}\nThe original dataset consists of 30,800 rows and 7 column in \"long-format\", where each row represents a combination of a `variable` and its corresponding `value` for a specific province and time period.\n\nThis format can make analysis more difficult since the different metrics are stored in rows instead of separate columns. Therefore we used `pivot_wider()` function from the `tidyr` package in R to transform the long format into a wider format. We also dropped `province_thai` and `region_thai` column as the information is already available in the English columns.\n\nThe resulting dataset has 3,850 rows and 11 columns. The columns are described as follows:\n\n+--------------------+---------------------------------------------------------------------------------------------------+\n| Column             | Description                                                                                       |\n+====================+===================================================================================================+\n| date               | The month and year in which the statistics were recorded. The dataset covers the years 2019-2023. |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| province_eng       | The name of the province in Thailand, in English.                                                 |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| region_eng         | The name of the region in Thailand to which the province belongs, in English.                     |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| no_tourist_all     | The total number of domestic tourists who visited the province.                                   |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| no_tourist_foreign | The number of foreign tourists who visited the province.                                          |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| no_tourist_stay    | The number of tourists who stay over-night in the province.                                       |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| no_tourist_thai    | The number of Thai tourists who visited the province.                                             |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| ratio_tourist_stay | The percentage of occupied travel accommodations in the province.                                 |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| revenue_all        | The total revenue generated by the tourism industry in the province (in Thai Baht).               |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| revenue_foreign    | The revenue generated specifically by foreign tourists (in Thai Baht).                            |\n+--------------------+---------------------------------------------------------------------------------------------------+\n| revenue_thai       | The revenue generated specifically by Thai tourists (in Thai Baht).                               |\n+--------------------+---------------------------------------------------------------------------------------------------+\n:::\n\n### Thailand's Province Administrative Boundaries\n\nThe Thailand subnational administrative boundaries dataset is available at four levels: administrative level 0 (country), level 1 (province), level 2 (district), and level 3 (sub-district or tambon). For this analysis, we will use administrative level 1 (province).\n\nWe will load the province-level boundaries using the `st_read()` function. The boundaries will then be transformed into [EPSG:32647](https://epsg.io/32647), which uses meters as units and is based on the UTM Zone 47N projection. Additionally, we will remove any unnecessary columns to streamline the dataset for analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_boundary <- st_read(dsn = \"data/geospatial/\",\n                          layer = \"tha_admbnda_adm1_rtsd_20220121\") %>%\n  st_transform(crs = 32647) %>%\n  rename(province_eng = ADM1_EN, pcode = ADM1_PCODE) %>%\n  select(1:3,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `/Users/cham/project/Geospatial-Analytics/chrismanafe/ISSS626-GAA/take_home_ex/take_home_ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nLet's verify the coordinate reference system of admin_boundary using `st_crs` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(admin_boundary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nNext, we will visualize `admin_boundary` using **tmap**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(admin_boundary)+\n  tm_fill(col=\"white\") +\n  tm_borders(col = \"black\", lwd=0.3, alpha=0.6)+\n  tm_layout(\n    main.title = \"Thailand Administrative Boundaries by Province\",\n    main.title.size = 1,\n    main.title.position = \"center\",\n    legend.show = FALSE,\n     frame = FALSE)\n```\n\n::: {.cell-output-display}\n![](take_home_ex02_files/figure-html/unnamed-chunk-5-1.png){width=768}\n:::\n:::\n\n\n# Exploratory Data Analysis\n\n## Summary statistics\n\nLet's find out the summary statistics of tourism data using `summary()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(tourism)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      date            province_eng        region_eng        ratio_tourist_stay\n Min.   :2019-01-01   Length:3850        Length:3850        Min.   : 0.00     \n 1st Qu.:2020-01-01   Class :character   Class :character   1st Qu.:20.18     \n Median :2021-01-16   Mode  :character   Mode  :character   Median :41.81     \n Mean   :2021-01-15                                         Mean   :38.93     \n 3rd Qu.:2022-02-01                                         3rd Qu.:56.20     \n Max.   :2023-02-01                                         Max.   :95.86     \n no_tourist_stay   no_tourist_all    no_tourist_thai   no_tourist_foreign \n Min.   :      0   Min.   :      0   Min.   :      0   Min.   :      0.0  \n 1st Qu.:  16271   1st Qu.:  39092   1st Qu.:  37169   1st Qu.:     49.2  \n Median :  44579   Median :  92122   Median :  88782   Median :    553.0  \n Mean   : 105161   Mean   : 206328   Mean   : 173962   Mean   :  32366.1  \n 3rd Qu.:  90902   3rd Qu.: 203646   3rd Qu.: 184256   3rd Qu.:   5189.5  \n Max.   :3335728   Max.   :6131044   Max.   :4087756   Max.   :2473725.0  \n  revenue_all         revenue_thai       revenue_foreign     \n Min.   :0.000e+00   Min.   :0.000e+00   Min.   :-4.250e+03  \n 1st Qu.:6.332e+07   1st Qu.:5.925e+07   1st Qu.: 1.100e+05  \n Median :1.955e+08   Median :1.773e+08   Median : 1.540e+06  \n Mean   :1.344e+09   Mean   :6.636e+08   Mean   : 6.802e+08  \n 3rd Qu.:5.060e+08   3rd Qu.:4.600e+08   3rd Qu.: 1.742e+07  \n Max.   :1.103e+11   Max.   :4.506e+10   Max.   : 8.503e+10  \n```\n\n\n:::\n:::\n\n\nWe observed there's negative value on revenue_foreign variables. Since the revenue represents earnings from tourism, let's assume that this is likely data entry error. So let's fix this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- tourism %>%\n  mutate(\n    revenue_foreign = ifelse(revenue_foreign < 0, 0, revenue_foreign),\n    revenue_all = ifelse(revenue_foreign == 0, revenue_thai, revenue_all)\n  )\nsummary(tourism)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      date            province_eng        region_eng        ratio_tourist_stay\n Min.   :2019-01-01   Length:3850        Length:3850        Min.   : 0.00     \n 1st Qu.:2020-01-01   Class :character   Class :character   1st Qu.:20.18     \n Median :2021-01-16   Mode  :character   Mode  :character   Median :41.81     \n Mean   :2021-01-15                                         Mean   :38.93     \n 3rd Qu.:2022-02-01                                         3rd Qu.:56.20     \n Max.   :2023-02-01                                         Max.   :95.86     \n no_tourist_stay   no_tourist_all    no_tourist_thai   no_tourist_foreign \n Min.   :      0   Min.   :      0   Min.   :      0   Min.   :      0.0  \n 1st Qu.:  16271   1st Qu.:  39092   1st Qu.:  37169   1st Qu.:     49.2  \n Median :  44579   Median :  92122   Median :  88782   Median :    553.0  \n Mean   : 105161   Mean   : 206328   Mean   : 173962   Mean   :  32366.1  \n 3rd Qu.:  90902   3rd Qu.: 203646   3rd Qu.: 184256   3rd Qu.:   5189.5  \n Max.   :3335728   Max.   :6131044   Max.   :4087756   Max.   :2473725.0  \n  revenue_all         revenue_thai       revenue_foreign    \n Min.   :0.000e+00   Min.   :0.000e+00   Min.   :0.000e+00  \n 1st Qu.:6.332e+07   1st Qu.:5.925e+07   1st Qu.:1.100e+05  \n Median :1.955e+08   Median :1.773e+08   Median :1.540e+06  \n Mean   :1.344e+09   Mean   :6.636e+08   Mean   :6.802e+08  \n 3rd Qu.:5.060e+08   3rd Qu.:4.600e+08   3rd Qu.:1.742e+07  \n Max.   :1.103e+11   Max.   :4.506e+10   Max.   :8.503e+10  \n```\n\n\n:::\n:::\n\n\n## Check Missing Values\n\nLet's check of any missing values in the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolSums(is.na(tourism))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              date       province_eng         region_eng ratio_tourist_stay \n                 0                  0                  0                  0 \n   no_tourist_stay     no_tourist_all    no_tourist_thai no_tourist_foreign \n                 0                  0                  0                  0 \n       revenue_all       revenue_thai    revenue_foreign \n                 0                  0                  0 \n```\n\n\n:::\n:::\n\n\n## Distribution Plots for Numerical Variables\n\nLet's visualize the numerical variables by province. We will apply a log transformation since some provinces have significantly larger numbers of tourists, which could make the boxplot difficult to analyze without scaling.\n\n::: panel-tabset\n## Number of Tourist\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tourism, aes(x = reorder(province_eng, no_tourist_all, FUN = median), y = no_tourist_all)) +\n  geom_boxplot(fill = \"lightblue\", color = \"black\") +\n  theme_minimal() +\n  scale_y_log10() +  # Log transformation for better scaling\n  labs(title = \"Boxplot of Tourists by Province (Log-Scale)\", \n       x = \"Province\", \n       y = \"Number of Tourists (Log Scale)\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in scale_y_log10(): log-10 transformation introduced infinite values.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 25 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex02_files/figure-html/unnamed-chunk-9-1.png){width=1152}\n:::\n:::\n\n\n## Revenue\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tourism, aes(x = reorder(province_eng, revenue_all, FUN = median), y = revenue_all)) +\n  geom_boxplot(fill = \"lightblue\", color = \"black\") +\n  theme_minimal() +\n  scale_y_log10() +  # Log transformation for better scaling\n  labs(title = \"Boxplot of Revenue by Province (Log Scale)\", x = \"Province\", y = \"Total Revenue (Log Scale)\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in scale_y_log10(): log-10 transformation introduced infinite values.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 24 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex02_files/figure-html/unnamed-chunk-10-1.png){width=1152}\n:::\n:::\n\n\n## Overnight-Staying Tourists\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tourism, aes(x = reorder(province_eng, no_tourist_stay, FUN = median), y = no_tourist_stay)) +\n  geom_boxplot(fill = \"lightblue\", color = \"black\") +\n  theme_minimal() +\n  scale_y_log10() +  # Log transformation for better scaling\n  labs(title = \"Boxplot of Overnight-Staying Tourists (Log Scale) by Province\", \n       x = \"Province\", \n       y = \"Number of Overnight-Staying Tourists (Log Scale)\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in scale_y_log10(): log-10 transformation introduced infinite values.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 25 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex02_files/figure-html/unnamed-chunk-11-1.png){width=1152}\n:::\n:::\n\n:::\n\n::: callout-note\n**Observations:**\n\nThe three boxplots above provide insights into tourism activity across Thai provinces, focusing on total tourists, overnight-staying tourists, and total tourism revenue.\n\n1.  **Tourist Concentration**: Provinces like **Bangkok**, **Chiang Mai**, and **Phuket** consistently show the highest median values across all three metrics, highlighting their dominance as key tourist hubs. These provinces also exhibit greater variability, indicating fluctuating tourism activity possibly due to factors like seasonality or COVID-19 pandemics.\n2.  **Smaller Provinces**: Provinces such as **Amnat Charoen** and **Nong Bua Lamphu** consistently display much lower median values and narrower interquartile ranges (IQR), suggesting smaller tourist volumes and revenues.\n3.  **Outliers**: Many provinces show significant lower-end outliers across all metrics, likely reflecting periods of reduced tourist activity due to external factors like travel restrictions during COVID-19 pandemics.\n\nOverall, Thailand's tourism revenue and tourist distribution are concentrated in a few key provinces, with the majority of smaller provinces experiencing lower and more stable activity.\n:::\n\n# Data Wrangling\n\n## Feature engineering\n\nWe wanted to introduce new indicators to enhance our analysis of tourist behavior and economic impact. We’ll create two key indicators:\n\n-   **Tourist Stay Rate**: The percentage of tourists staying overnight in each province.\n-   **Revenue Per Tourist (Overall)**: The average revenue generated per tourist.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- tourism %>%\n  mutate(\n    tourist_stay_rate = ifelse(no_tourist_all > 0, (no_tourist_stay / no_tourist_all) * 100, NA),\n    revenue_per_tourist_all = ifelse(no_tourist_all > 0, revenue_all / no_tourist_all, NA)\n  )\n```\n:::\n\n\n## Province name alignment\n\nWe will resolve discrepancies in province names between the boundary and tourism datasets to ensure consistency, enabling accurate analysis and spatial joins. First, we will extract unique province names from both datasets and checks for mismatches by identifying provinces present in one dataset but not the other.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract unique values from both columns\nadmin_provinces <- unique(admin_boundary$province_eng)\ntourism_provinces <- unique(tourism$province_eng)\n\n# Check for mismatches\nadmin_not_in_tourism <- setdiff(admin_provinces, tourism_provinces)\ntourism_not_in_admin <- setdiff(tourism_provinces, admin_provinces)\n\n# Print mismatches\nprint(admin_not_in_tourism)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Lop Buri\"         \"Chai Nat\"         \"Chon Buri\"        \"Prachin Buri\"    \n[5] \"Buri Ram\"         \"Si Sa Ket\"        \"Nong Bua Lam Phu\" \"Phangnga\"        \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(tourism_not_in_admin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Lopburi\"         \"Chainat\"         \"Chonburi\"        \"Prachinburi\"    \n[5] \"Phang Nga\"       \"Buriram\"         \"Sisaket\"         \"Nong Bua Lamphu\"\n```\n\n\n:::\n:::\n\n\n> We identified 8 provinces with different English names between the two datasets, so we will use `mutate()` to align the province names in the `tourism` dataset to match those in the `admin_boundary` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- tourism %>%\n  mutate(province_eng = case_when(\n    province_eng == \"Lopburi\" ~ \"Lop Buri\",\n    province_eng == \"Chainat\" ~ \"Chai Nat\",\n    province_eng == \"Chonburi\" ~ \"Chon Buri\",\n    province_eng == \"Prachinburi\" ~ \"Prachin Buri\",\n    province_eng == \"Phang Nga\" ~ \"Phangnga\",\n    province_eng == \"Buriram\" ~ \"Buri Ram\",\n    province_eng == \"Sisaket\" ~ \"Si Sa Ket\",\n    province_eng == \"Nong Bua Lamphu\" ~ \"Nong Bua Lam Phu\",\n    TRUE ~ province_eng  # Keep the original name if no match\n  ))\n```\n:::\n\n\nLet's verify the result.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract unique values from both columns\nadmin_provinces <- unique(admin_boundary$province_eng)\ntourism_provinces <- unique(tourism$province_eng)\n\n# Check for mismatches\nadmin_not_in_tourism <- setdiff(admin_provinces, tourism_provinces)\ntourism_not_in_admin <- setdiff(tourism_provinces, admin_provinces)\n\n# Print mismatches\nprint(admin_not_in_tourism)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(tourism_not_in_admin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n:::\n\n\n## Perform relational join\n\nSince the tourism dataset does not contain any geospatial properties, we will perform a relational join with the `admin_boundary` dataset, which includes the necessary spatial information. This will allow us to incorporate geospatial data into the tourism dataset. We will use the `left_join()` function from the `dplyr` package to merge the two datasets based on the province names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_geo <- left_join(admin_boundary, tourism)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(province_eng)`\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(tourism_geo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,850\nColumns: 17\n$ Shape_Leng              <dbl> 2.417227, 2.417227, 2.417227, 2.417227, 2.4172…\n$ Shape_Area              <dbl> 0.1313387, 0.1313387, 0.1313387, 0.1313387, 0.…\n$ province_eng            <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"B…\n$ pcode                   <chr> \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\"…\n$ date                    <date> 2019-01-01, 2020-01-01, 2021-01-01, 2022-01-0…\n$ region_eng              <chr> \"central\", \"central\", \"central\", \"central\", \"c…\n$ ratio_tourist_stay      <dbl> 93.37, 89.36, 7.54, 26.34, 75.02, 89.19, 68.37…\n$ no_tourist_stay         <dbl> 3334971, 3213765, 354676, 1009583, 2440463, 30…\n$ no_tourist_all          <dbl> 5959075, 6046765, 1681847, 2437497, 4872078, 5…\n$ no_tourist_thai         <dbl> 3534061, 3573040, 1632693, 2299906, 2749877, 2…\n$ no_tourist_foreign      <dbl> 2425014, 2473725, 49154, 137591, 2122201, 2291…\n$ revenue_all             <dbl> 81926490000, 88202890000, 9539730000, 11823610…\n$ revenue_thai            <dbl> 29742580000, 31137650000, 8447450000, 96426000…\n$ revenue_foreign         <dbl> 52183910000, 57065240000, 1092280000, 21810100…\n$ tourist_stay_rate       <dbl> 55.96458, 53.14850, 21.08848, 41.41884, 50.090…\n$ revenue_per_tourist_all <dbl> 13748.189, 14586.790, 5672.175, 4850.718, 1237…\n$ geometry                <MULTIPOLYGON [m]> MULTIPOLYGON (((674339.8 15..., M…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(tourism_geo, \"data/rds/tourism_geo.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Province-level Summary of Tourism Economy Indicators\n\nWe will prepare a province-level summary of key tourism indicators, including both original metrics such as total tourists, foreign tourists, and total revenue, as well as newly engineered indicators like the tourist stay rate and revenue per tourist. This summary will provide a overall view of tourism patterns and economic contributions across each province.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince_summary <- tourism_geo %>%\n  group_by(province_eng) %>%\n  summarise(\n    # Summarize original data\n    total_tourists_all = sum(no_tourist_all, na.rm = TRUE),\n    total_foreign_tourists = sum(no_tourist_foreign, na.rm = TRUE),\n    total_thai_tourists = sum(no_tourist_thai, na.rm = TRUE),\n    total_stay_tourists = sum(no_tourist_stay, na.rm = TRUE),\n    avg_occupancy_rate = mean(ratio_tourist_stay, na.rm = TRUE),\n    total_revenue_all = sum(revenue_all, na.rm = TRUE),\n    total_revenue_foreign = sum(revenue_foreign, na.rm = TRUE),\n    total_revenue_thai = sum(revenue_thai, na.rm = TRUE),\n    \n    # Summarize engineered data\n    avg_tourist_stay_rate = mean(tourist_stay_rate, na.rm = TRUE),\n    avg_revenue_per_tourist = mean(revenue_per_tourist_all, na.rm = TRUE)\n  )\nwrite_rds(province_summary, \"data/rds/province_summary.rds\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n> We will use following indicators for our analysis:\n>\n> -   **Total Tourists (`total_tourists_all`)**, because it helps us understand how tourist numbers are distributed across provinces.\n> -   **Tourist Stay Rate (`avg_tourist_stay_rate`)**, because it could reveal regional patterns in how provinces retain visitors to stay over-night.\n> -   **Revenue Per Tourist (`avg_revenue_per_tourist`)**, because it helps identify areas where tourism generates the most economic benefit, potentially showing clusters of higher revenue generation.\n\n## Visualization of Thailand's Tourism Distribution\n\nUsing the `province_summary` data frame, we will create choropleth maps to visualize the geographical distribution of the 3 tourism economy indicators across Thailand.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist <- tm_shape(province_summary) +\n  tm_fill(\"total_tourists_all\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Total Tourist\", main.title.size = 1)\n\nforeign_tourists <- tm_shape(province_summary) +\n  tm_fill(\"avg_tourist_stay_rate\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Tourist Stay Rate\", main.title.size = 1)\n\nrevenue_per_tourist <- tm_shape(province_summary) +\n  tm_fill(\"avg_revenue_per_tourist\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Revenue per Tourist\", main.title.size = 1)\n\ntmap_arrange(tourist,\n             foreign_tourists,\n             revenue_per_tourist,\n             asp=1,\n             ncol=3)\n```\n\n::: {.cell-output-display}\n![](take_home_ex02_files/figure-html/unnamed-chunk-21-1.png){width=1152}\n:::\n:::\n\n\n# Global Measures of Spatial Autocorrelation\n\nIn this section, we will compute global spatial autocorrelation statistics to evaluate whether the key indicators exhibit spatial dependence across provinces. Specifically, we will use Moran’s I to measure the degree of spatial autocorrelation.\n\n## Computing Contiguity Neighbours\n\nTypically, we use the `st_contiguity()` function from the **sfdep** package to compute contiguity weight matrices, which build neighbor relationships based on shared boundaries between regions. However, because our dataset includes province located on separate island (i.e. Phuket), contiguity-based methods would leave some region without neighbors. To overcome this issue, we will use the **K-Nearest Neighbors (KNN)** approach to compute spatial weights. This method ensures that every province has neighbors, even for those on isolated islands, by assigning each region a fixed number of nearest neighbors based on distance rather than shared boundaries.\n\nFirst, we need to ensure that the centroids used for each province are correctly placed within the province boundaries and not in the sea or outside of the boundary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince_centroids <- province_summary %>%\n      st_centroid() %>%\n      select(province_eng, geometry)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(province_summary) +\n  tm_borders() +\n  tm_shape(province_centroids) +\n  tm_dots(col = \"red\", size = 0.1) +\n  tm_layout(main.title = \"Centroids of Thailand Provinces\",\n            main.title.position = \"center\",\n            frame = FALSE)\n```\n\n::: {.cell-output-display}\n![](take_home_ex02_files/figure-html/unnamed-chunk-23-1.png){width=768}\n:::\n:::\n\n\n> We verified that the centroids are correctly placed within the province boundaries, ensuring that none are positioned in the sea or outside their respective boundaries.\n\nWith the centroids correctly positioned, we will proceed with two approaches for computing spatial weights:\n\n1.  **K-Nearest Neighbors (KNN)**: Using the `st_knn()` function from the **sfdep** package, we will compute KNN-based spatial weights. This ensures that all provinces, including those on isolated islands, have neighbors based on geographic proximity rather than shared boundaries.\n\n2.  **Distance Band Weights**: We will also use the `st_dist_band()` function from **sfdep** to create a distance-based spatial weights matrix. This method defines neighbors for provinces based on a maximum distance threshold, ensuring that regions within a certain distance of each other are considered neighbors.\n\nBoth methods will help account for geographic proximity while ensuring that all regions, including isolated provinces, are part of the spatial analysis.\n\n::: panel-tabset\n## st_knn()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_knn <- province_summary %>%\n  mutate(nb = st_knn(geometry, k = 8),\n         wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n         wt = map(wt, ~ .x / sum(.x)),\n         .before = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n```\n\n\n:::\n:::\n\n\n## st_dist_band()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_fd <- province_summary %>%\n  mutate(nb = st_dist_band(province_summary$geometry),\n         wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n         wt = map(wt, ~ .x / sum(.x)),\n         .before = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n```\n\n\n:::\n:::\n\n:::\n\n> We normalize the inverse distance weights to ensure that each province's spatial influence is comparable and sum up to 1.\n\n## Global Moran’s I Test and Permutation Test\n\nIn this section, we will assess the spatial dependence of three key tourism indicators across provinces in Thailand using the **Global Moran’s I test**. If the indicators are independent of space, Moran's I should show no significant spatial autocorrelation.\n\n-   **Null Hypothesis (H₀)**: The tourism economy indicators are spatially independent (randomly distributed in space).\n\n-   **Alternative Hypothesis (H₁)**: There is spatial dependence, indicating that similar values are clustered or dispersed.\n\nWe will conduct the analysis at a 95% confidence interval (significance level of 0.05) using the `global_moran_test` function from the **sfdep** package. Additionally, we will run a permutation test with 1,000 simulations to validate the results using `global_moran_perm` function.\n\nWe will evaluate the following tourism economy indicators:\n\n-   Total Tourists\n-   Average of Tourist Stay Rate\n-   Revenue per Tourist\n\nFor each indicator, we will apply both the **K-Nearest Neighbors (KNN)** and **Distance Band** weight matrices to observe the spatial patterns.\n\n### Total Tourists: Global Moran’s I Test and Permutation Test\n\n#### KNN Weights\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_knn$total_tourists_all,\n           wm_knn$nb,\n           wm_knn$wt,\n           zero.policy = TRUE,\n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.1069, p-value = 0.1342\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.026678128      -0.013157895       0.001295218 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\nglobal_moran_perm(wm_knn$total_tourists_all,\n                  wm_knn$nb,\n                  wm_knn$wt,\n                  nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.026678, observed rank = 879, p-value = 0.242\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n#### Distance Band Weights\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_fd$total_tourists_all,\n           wm_fd$nb,\n           wm_fd$wt,\n           zero.policy = TRUE,\n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.0694, p-value = 0.1424\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.040849188      -0.013157895       0.002550464 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\nglobal_moran_perm(wm_fd$total_tourists_all,\n                  wm_fd$nb,\n                  wm_fd$wt,\n                  nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.040849, observed rank = 881, p-value = 0.238\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n::: {.callout-note appearance=\"simple\"}\n**Observations:**\n\n**K-Nearest Neighbors (KNN):**\n\n-   Moran's I statistic: 0.0267\n-   p-value (Moran’s I test): 0.1342\n-   p-value (Monte Carlo permutation test): 0.242\n\nThe Moran's I statistic of 0.0267 shows very weak positive spatial autocorrelation, suggesting almost no spatial clustering of total tourists. Both the Moran’s I test and the Monte Carlo permutation test yield high p-values (above 0.05), indicating that we fail to reject the null hypothesis. This implies that the distribution of total tourists remains random, with no significant spatial clustering when using normalized KNN weights.\n\n------------------------------------------------------------------------\n\n**Distance Band Weights:**\n\n-   Moran's I statistic: 0.0408\n-   p-value (Moran’s I test): 0.1424\n-   p-value (Monte Carlo permutation test): 0.238\n\nThe Moran’s I statistic of 0.0408 also shows weak positive spatial autocorrelation, indicating no substantial clustering of total tourists across provinces. The high p-values from both the Moran’s I test and Monte Carlo permutation test further confirm that we fail to reject the null hypothesis. The total tourist distribution remains random, with no significant spatial dependence when using normalized distance-based weights.\n\n------------------------------------------------------------------------\n\nFor total tourists, both the KNN and distance band methods show no significant spatial autocorrelation. The p-values from both tests indicate that we fail to reject the null hypothesis.\n:::\n\n### Average of Tourist Stay Rate: Global Moran’s I Test and Permutation Test\n\n#### KNN Weights\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_knn$avg_tourist_stay_rate,\n           wm_knn$nb,\n           wm_knn$wt,\n           zero.policy = TRUE,\n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 7.4571, p-value = 4.422e-14\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.409217712      -0.013157895       0.003208175 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\nglobal_moran_perm(wm_knn$avg_tourist_stay_rate,\n                  wm_knn$nb,\n                  wm_knn$wt,\n                  nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.40922, observed rank = 1000, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n#### Distance Band Weights\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_fd$avg_tourist_stay_rate,\n           wm_fd$nb,\n           wm_fd$wt,\n           zero.policy = TRUE,\n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 5.9277, p-value = 1.536e-09\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.458854837      -0.013157895       0.006340634 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\nglobal_moran_perm(wm_fd$avg_tourist_stay_rate,\n                  wm_fd$nb,\n                  wm_fd$wt,\n                  nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.45885, observed rank = 1000, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n::: {.callout-note appearance=\"simple\"}\n**Observations:**\n\n**K-Nearest Neighbors (KNN):**\n\n-   Moran's I statistic: 0.4092\n-   p-value (Moran’s I test): 4.422e-14\n-   p-value (Monte Carlo permutation test): \\< 2.2e-16\n\nThe Moran's I statistic of 0.4092 indicates strong positive spatial autocorrelation, suggesting that provinces with similar tourist stay rates tend to be clustered together. Both the Moran’s I test and the Monte Carlo permutation test return extremely low p-values, confirming that this clustering is highly statistically significant. Thus, we reject the null hypothesis, as there is strong evidence of spatial dependence in tourist stay rates when using normalized KNN weights.\n\n------------------------------------------------------------------------\n\n**Distance Band Weights:**\n\n-   Moran's I statistic: 0.4586\n-   p-value (Moran’s I test): 1.536e-09\n-   p-value (Monte Carlo permutation test): \\< 2.2e-16\n\nThe Moran’s I statistic of 0.4586 shows strong positive spatial autocorrelation, indicating that provinces with similar tourist stay rates are geographically clustered. Both the Moran’s I test and the Monte Carlo permutation test yield very low p-values, confirming that this spatial clustering is highly statistically significant. Therefore, we reject the null hypothesis, as there is strong evidence of spatial dependence using normalized distance-based weights.\n\n------------------------------------------------------------------------\n\nFor average tourist stay rate, both the KNN and distance band methods show strong spatial autocorrelation, and the results are highly statistically significant. In both cases, we reject the null hypothesis, indicating that provinces with similar tourist stay rates are spatially clustered.\n:::\n\n### Average Revenue per Tourists: Global Moran’s I Test and Permutation Test\n\n#### KNN Weights\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_knn$avg_revenue_per_tourist,\n           wm_knn$nb,\n           wm_knn$wt,\n           zero.policy = TRUE,\n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 7.125, p-value = 5.204e-13\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.344633674      -0.013157895       0.002521688 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\nglobal_moran_perm(wm_knn$avg_revenue_per_tourist,\n                  wm_knn$nb,\n                  wm_knn$wt,\n                  nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.34463, observed rank = 1000, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n#### Distance Band Weights\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_fd$avg_revenue_per_tourist,\n           wm_fd$nb,\n           wm_fd$wt,\n           zero.policy = TRUE,\n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 6.3368, p-value = 1.173e-10\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.434043125      -0.013157895       0.004980487 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\nglobal_moran_perm(wm_fd$avg_revenue_per_tourist,\n                  wm_fd$nb,\n                  wm_fd$wt,\n                  nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.43404, observed rank = 1000, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n\n\n::: {.callout-note appearance=\"simple\"}\n**Observations:**\n\n**K-Nearest Neighbors (KNN):**\n\n-   Moran's I statistic: 0.3446\n-   p-value (Moran’s I test): 5.204e-13\n-   p-value (Monte Carlo permutation test): \\< 2.2e-16\n\nThe Moran's I statistic of 0.3446 indicates moderate positive spatial autocorrelation, suggesting that provinces with similar revenue per tourist tend to be clustered. Both the Moran’s I test and the Monte Carlo permutation test return very low p-values, confirming that this clustering is highly statistically significant. Therefore, we reject the null hypothesis, as there is strong evidence of spatial dependence in revenue per tourist when using normalized KNN weights.\n\n------------------------------------------------------------------------\n\n**Distance Band Weights:**\n\n-   Moran's I statistic: 0.4340\n-   p-value (Moran’s I test): 1.173e-10\n-   p-value (Monte Carlo permutation test): \\< 2.2e-16\n\nThe Moran’s I statistic of 0.4340 indicates strong positive spatial autocorrelation, showing that provinces with similar revenue per tourist are geographically clustered. Both the Moran’s I test and the Monte Carlo permutation test yield extremely low p-values, confirming that this spatial clustering is highly statistically significant. Therefore, we reject the null hypothesis, as there is clear evidence of spatial dependence using normalized distance-based weights.\n\n------------------------------------------------------------------------\n\nFor average revenue per tourist, both the KNN and distance band methods with inverse distance weights show moderate spatial autocorrelation, and the results are statistically significant. In both cases, we reject the null hypothesis, indicating that provinces with similar revenue per tourist are spatially clustered.\n:::\n\n## Interpreting Results\n\nThe results from the Global Moran’s I test and the Monte Carlo simulation tell us that:\n\n-   Total tourist numbers show weak spatial autocorrelation, indicating that while some provinces attract more tourists, there is no strong regional clustering. The distribution of tourists seems random, with individual provinces standing out rather than forming distinct regional patterns.\n\n-   In contrast, both average tourist stay rate and average revenue per tourist display moderate to strong and statistically significant spatial autocorrelation. Provinces that are geographically close tend to have similar tourist retention rates and revenue generated per tourist. This suggests that these tourism economy indicators are regionally concentrated, likely due to shared tourism infrastructure, similar attractions, or collaborative regional policies.\n\n# Local Measures of Spatial Autocorrelation\n\nLocal Indicators of Spatial Association (LISA) allow us to evaluate clusters between regions. Simply put, LISA is a statistical method that helps identify areas where values are either clustered (similar values are found together) or where there are outliers. Higher LISA values indicate that a region is more strongly influenced by its neighboring regions, meaning it is part of a spatial cluster.\n\nIn this section, we will apply **Local Indicators of Spatial Association (LISA)** to the same tourism indicators used in the Global Moran’s I analysis.\n\n## Cluster and Outlier Analysis\n\n### Computing Local Moran's I\n\nWe will compute Local Moran's I of three selected indicators at province level by using `local_moran()` function of **sfdep** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\nlisa_total_tourists_knn <- wm_knn %>% \n  mutate(local_moran = local_moran(\n    total_tourists_all, nb, wt),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\nlisa_tourist_stay_rate_knn <- wm_knn %>% \n  mutate(local_moran = local_moran(\n    avg_tourist_stay_rate, nb, wt),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\nlisa_revenue_per_tourist_knn <- wm_knn %>% \n  mutate(local_moran = local_moran(\n    avg_revenue_per_tourist, nb, wt),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n\n### Plotting LISA map\n\nWe will use the tmap package to visualize the results of the Local Moran’s I computation, specifically using the values from the ii and mean fields. To enable effective comparison, we will plot both maps side by side—one showing the local spatial autocorrelation (ii values) and the other highlighting the clusters or outliers of total tourists. Specifically, we will highlight clusters where the **p-values** from the **Local Moran’s I** are below 0.05, indicating potential spatial clusters or outliers.\n\nFirst, let's define the label and palette for each cluster.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"Insignificant\", \"Low-Low\", \"Low-High\", \"High-Low\", \"High-High\")\n```\n:::\n\n\n#### Total Number of Tourists\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_total_tourists_knn$quadrant <- case_when(\n  lisa_total_tourists_knn$p_ii_sim >= 0.05 ~ 0,  # Set quadrant to 0 if p_ii_sim is greater than or equal to 0.05\n  lisa_total_tourists_knn$mean == \"Low-Low\" ~ 1,  # Assign quadrant values for significant clusters\n  lisa_total_tourists_knn$mean == \"Low-High\" ~ 2,\n  lisa_total_tourists_knn$mean == \"High-Low\" ~ 3,\n  lisa_total_tourists_knn$mean == \"High-High\" ~ 4\n)\n\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nmap1 <- tm_shape(lisa_total_tourists_knn) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) +\n  tm_view() +\n  tm_layout(\n    main.title = \"Local Moran's I of Total Tourists\",\n    main.title.size = 0.8\n  )\n\nmap2 <- tm_shape(lisa_total_tourists_knn) +\n  tm_fill(\"quadrant\",\n          breaks = c(-0.5, 0.5, 1.5, 2.5, 3.5, 4.5),\n          palette = colors,\n          labels = clusters)+\n  tm_borders(alpha = 0.5) +\n  tm_view() +\n  tm_layout(\n    main.title = \"LISA Map of Total Tourists\",\n    main.title.size = 0.8\n  )\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex02_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n#### Average of Tourist Stay Rate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_tourist_stay_rate_knn$quadrant <- case_when(\n  lisa_tourist_stay_rate_knn$p_ii_sim >= 0.05 ~ 0,  # Set quadrant to 0 if p_ii_sim is greater than or equal to 0.05\n  lisa_tourist_stay_rate_knn$mean == \"Low-Low\" ~ 1,  # Assign quadrant values for significant clusters\n  lisa_tourist_stay_rate_knn$mean == \"Low-High\" ~ 2,\n  lisa_tourist_stay_rate_knn$mean == \"High-Low\" ~ 3,\n  lisa_tourist_stay_rate_knn$mean == \"High-High\" ~ 4\n)\n\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nmap1 <- tm_shape(lisa_tourist_stay_rate_knn) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(\n    main.title = \"Local Moran's I of Tourists Stay Rate\",\n    main.title.size = 0.8\n  )\n\nmap2 <- tm_shape(lisa_tourist_stay_rate_knn) +\n  tm_fill(\"quadrant\",\n          breaks = c(-0.5, 0.5, 1.5, 2.5, 3.5, 4.5),\n          palette = colors,\n          labels = clusters) +\n  tm_borders(alpha = 0.5) +\n  tm_view() +\n  tm_layout(\n    main.title = \"LISA Map of Tourists Stay Rate\",\n    main.title.size = 0.8\n  )\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex02_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n\n#### Average Revenue Per Tourists\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_revenue_per_tourist_knn$quadrant <- case_when(\n  lisa_revenue_per_tourist_knn$p_ii_sim >= 0.05 ~ 0,  # Set quadrant to 0 if p_ii_sim is greater than or equal to 0.05\n  lisa_revenue_per_tourist_knn$mean == \"Low-Low\" ~ 1,  # Assign quadrant values for significant clusters\n  lisa_revenue_per_tourist_knn$mean == \"Low-High\" ~ 2,\n  lisa_revenue_per_tourist_knn$mean == \"High-Low\" ~ 3,\n  lisa_revenue_per_tourist_knn$mean == \"High-High\" ~ 4\n)\n\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nmap1 <- tm_shape(lisa_revenue_per_tourist_knn) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) +\n  tm_view() +\n  tm_layout(\n    main.title = \"Local Moran's I of Revenue per Tourist\",\n    main.title.size = 0.8\n  )\n\nmap2 <- tm_shape(lisa_revenue_per_tourist_knn) +\n  tm_fill(\"quadrant\",\n          breaks = c(-0.5, 0.5, 1.5, 2.5, 3.5, 4.5),\n          palette = colors,\n          labels = clusters) +\n  tm_borders(alpha = 0.5) +\n  tm_view() +\n  tm_layout(\n    main.title = \"LISA Map of Revenue per Tourist\",\n    main.title.size = 0.8\n  )\n\ntmap_arrange(map1, map2, ncol = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take_home_ex02_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n**Observations**:\n\nIn the analysis of total tourists, Samut Prakan emerges as a Low-High outlier. This province has 8 million tourists in contrast to its neighboring province, Bangkok, which sees 151 million tourists. For tourist stay rates, several Low-High outliers are observed in provinces surrounding Bangkok, likely due to the prevalence of day trips where tourists visit nearby locations but return to Bangkok by the end of the day. Additionally, High-High clusters are identified in Krabi and adjacent southern provinces, with a Low-High outlier in Phang Nga, which is in close proximity to the popular tourist destinations such as Phuket and Krabi.\n\nIn terms of revenue per tourist, Bangkok is classified as a High-Low outlier, which aligns with its status as Thailand's primary tourism hub, attracting the largest number of tourists. Furthermore, a High-High cluster is evident in Phuket, Krabi, and Phang Nga, which are well-known major tourism areas. However, neighboring provinces such as Nakhon Si Thammarat and Phatthalung are identified as Low-High outliers, despite their proximity to these popular destinations.\n:::\n\n## Hot and Cold Spot Analysis with Local Gi\\*\n\nBesides detecting clusters and outliers, localized spatial statistics can also be used to identify hot spots and/or cold spots.\n\nThe High/Low Clustering (General G) tool measures the spatial concentration of high or low values within a given study area. The null hypothesis for this statistic states that there is no spatial clustering of feature values. When the p-value is small and statistically significant, the null hypothesis can be rejected, and the sign of the Gi value becomes crucial for interpretation.\n\n-   If the Gi value is positive and statistically significant, it indicates that the location is associated with high values in the surrounding area (i.e., hot spots).\n\n-   If the Gi value is negative and statistically significant, it indicates that the location is surrounded by low values (i.e., cold spots).\n\nThe Getis-Ord General G tool is most effective when values are evenly distributed across the area, as it helps identify unexpected clusters of high values (hot spots). However, it has a limitation: when both high and low values are clustered within the same region, they tend to cancel each other out, reducing the tool’s effectiveness in such cases.\n\nIn this study, we will compute the Local Gi statistic in R. First, we will use the `st_dist_band()` function to create a neighbor list, and then apply the `include_self()` function to ensure that the focal observation is included in its own neighbor list. Afterward, we will use this neighbor list to create a weight list by applying the `st_inverse_distance()` function. To ensure **comparability** and **balanced influence** across locations, we will **normalize** the weights, which helps prevent bias and stabilizes the effect of distance on the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw <- province_summary %>%\n  mutate(nb = include_self(st_dist_band(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         wt = map(wt, ~ .x / sum(.x)),\n         .before = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n! Polygon provided. Using point on surface.\n! Polygon provided. Using point on surface.\n```\n\n\n:::\n:::\n\n\nNow, we will calculate the Local Gi statistic using the `local_gstar_perm()` function from the **sfdep** package. This function takes a neighbor list (`nb`) and a weight list (`wt`) as inputs and generates the Gi statistics\\* through a Monte Carlo permutation with a specified number of simulations (`nsim`). The results will then be stored in a new object called `HCSA`.\n\nAfter we run the Montewe replace any p-values (p_sim) greater than 0.05 with NA to filter out non-significant results. Then, we update the Gi statistic (`gi_star`) by setting it to `NA` for any non-significant values, ensuring that only statistically significant hot spots and cold spots are retained in the final output.\n\n### Compute Local Gi statistic\n\n**Total Number of Tourists**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_total_tourist <- wm_idw %>% \n  mutate(local_Gi = local_gstar_perm(\n    total_tourists_all, nb, wt, nsim = 999),\n         .before = 1) %>%\n  unnest(local_Gi) %>%\n  mutate(\"p_sim\" = replace(`p_sim`, `p_sim` > 0.05, NA),\n         \"gi_star\" = ifelse(is.na(`p_sim`), NA, `gi_star`))\n```\n:::\n\n\n**Average of Tourist Stay Rate**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_tourist_stay_rate <- wm_idw %>% \n  mutate(local_Gi = local_gstar_perm(\n    avg_tourist_stay_rate, nb, wt, nsim = 999),\n         .before = 1) %>%\n  unnest(local_Gi) %>%\n  mutate(\"p_sim\" = replace(`p_sim`, `p_sim` > 0.05, NA),\n         \"gi_star\" = ifelse(is.na(`p_sim`), NA, `gi_star`))\n```\n:::\n\n\n**Average Revenue per Tourist**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_revenue_per_tourist <- wm_idw %>% \n  mutate(local_Gi = local_gstar_perm(\n    avg_revenue_per_tourist, nb, wt, nsim = 999),\n         .before = 1) %>%\n  unnest(local_Gi) %>%\n  mutate(\"p_sim\" = replace(`p_sim`, `p_sim` > 0.05, NA),\n         \"gi_star\" = ifelse(is.na(`p_sim`), NA, `gi_star`))\n```\n:::\n\n\n### Visualize local hot spot and cold spot areas\n\nNext, we will visualize the locations of hot spot and cold spot areas. The choropleth mapping functions from the **tmap** package will be used to map the Gi values for each selected indicator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nmap1 <- tm_shape(HCSA_total_tourist) +\n  tm_fill(\"gi_star\", palette=\"-RdBu\", midpoint=0, title=\"Gi*\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"HCSA: Total Tourists\",\n    main.title.size = 0.8\n  )\n\nmap2 <- tm_shape(HCSA_tourist_stay_rate) +\n  tm_fill(\"gi_star\", palette=\"-RdBu\", midpoint=0, title=\"Gi*\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"HCSA: Tourist Stay Rate\",\n    main.title.size = 0.8\n  )\n\nmap3 <- tm_shape(HCSA_revenue_per_tourist) +\n  tm_fill(\"gi_star\", palette=\"-RdBu\", midpoint=0, title=\"Gi*\") + \n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"HCSA: Revenue per Tourist\",\n    main.title.size = 0.8\n  )\n\ntmap_arrange(map1, map2, map3, ncol = 3)\n```\n\n::: {.cell-output-display}\n![](take_home_ex02_files/figure-html/unnamed-chunk-49-1.png){width=1152}\n:::\n:::\n\n\n::: callout-note\nThe Local Gi maps\\* highlight distinct patterns of hot spots and cold spots across Thailand, consistent with the earlier LISA analysis. In the total tourists map, a cold spot is visible in the north-eastern provinces, reflecting a lower concentration of tourists, while a small hot spot is visible in Bangkok Province. The tourist stay rate map shows cold spots in provinces surrounding Bangkok, likely due to day-trip tourists, while hot spots are observed in southern provinces like Krabi and Phang Nga, where tourists tend to stay longer. Finally, the revenue per tourist map identifies strong hot spots in the southern provinces of Phuket, Krabi, and Phang Nga, known for their tourism appeal, with cold spots in the north-eastern provinces, where fewer tourists visit and generate less revenue.\n:::\n",
    "supporting": [
      "take_home_ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}