---
title: "Hands-on Exercise 5b: Local Measures of Spatial Autocorrelation"
subtitle: "In this exercise, we will learn to compute Local Measures of Spatial Autocorrelation (LMSA) using the spdep package, including Local Moran's I, Getis-Ord's Gi-statistics, and their visualizations."
author: "Christover Manafe"
date: "2024-09-18"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
format: 
  html:
    code-fold: false
    code-summary: "code chunk"
    number-sections: true
    number-depth: 4
---

# Overview

**Local Measures of Spatial Autocorrelation (LMSA)** focus on the relationships between individual observations and their surroundings, rather than providing a single summary statistic for the entire map. In this sense, they do not offer an overall summary but provide scores that help us explore the spatial structure in the data. Despite this difference, the general intuition behind these metrics is similar to that of global ones. In fact, some LMSA metrics are mathematically connected to their global counterparts, where the global measure can be decomposed into a set of local values. One such example is the **Local Indicators of Spatial Association (LISA)**. In addition to LISA, we will also introduce **Getis-Ord’s Gi-statistics**, another LMSA metric that provides complementary information and allows us to derive similar insights for geographically referenced data.

In this hands-on exercise, we will learn how to compute Local Measures of Spatial Autocorrelation (LMSA) using the **spdep** package in R.

# Getting Started

::: callout-note
In spatial policy, one of the main development objectives of local governments and planners is to ensure the **equal distribution of development** across the province. The goal of this study, therefore, is to apply appropriate spatial statistical methods to determine whether development is evenly distributed geographically.

-   If the answer is **no**, the next step is to ask: **Is there evidence of spatial clustering?**

-   If the answer is **yes**, the following question is: **Where are these clusters located?**
:::

# The Data

We will use following geospatial datasets in this exercise:

| Dataset      | Description                                                    | Format         |
|-------------------|--------------------------------|---------------------|
| *Hunan*      | Hunan county boundary layer geospatial data                    | ESRI shapefile |
| *Hunan_2012* | Contains selected Hunan’s local development indicators in 2012 | CSV file       |

: {tbl-colwidths="\[15,65,20\]"}

# Installing and launching the R packages

::: panel-tabset
## Packages

We will use following packages in this exercise:

| Package                                                     | Description                                                                                                                                                                                                          |
|---------------------------|---------------------------------------------|
| [**sf**](https://r-spatial.github.io/sf/)                   | Provides functions to manage, processing, and manipulate **Simple Features**, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons. |
| [**spdep**](https://cran.r-project.org/web/packages/spdep/) | Provides collection of functions to create spatial weights matrix objects from polygon 'contiguities', from point patterns by distance and tessellations.                                                            |
| [**tidyverse**](https://www.tidyverse.org/)                 | Provides collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data.                                                                                   |
| [**tmap**](https://cran.r-project.org/web/packages/tmap/)   | Provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API                                                                   |

: {tbl-colwidths="\[15,85\]"}

## Code

To install and launch the four R packages.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```
:::

# Data Import and Preparation

## Loading the data

In this section, we will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.

::: panel-tabset
## Import geospatial data

We use [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

```{r}
#| echo: false
glimpse(hunan)
```

## Import aspatial data

Then we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R dataframe class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
#| echo: false
glimpse(hunan2012)
```

## Perform relational join

We will also update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.

```{r}
colnames(hunan)
```

```{r}
colnames(hunan2012)
```

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
```

```{r}
#| echo: false
glimpse(hunan)
```
:::

## Visualising Regional Development Indicator

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using `qtm()` of **tmap** package.

```{r fig.width=16, fig.height=8}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

# Local Indicators of Spatial Association(LISA)

**Local Indicators of Spatial Association (LISA)** are statistics used to evaluate the presence of clusters and/or outliers in the spatial distribution of a given variable. For example, if we are studying the distribution of **GDP per capita** in **Hunan Province, People’s Republic of China**, the presence of local clusters would indicate that certain counties have significantly higher or lower GDP per capita than would be expected by chance alone—meaning their values deviate from what would occur in a random spatial distribution.

In this section, we will learn how to apply appropriate **Local Indicators of Spatial Association (LISA)**, particularly **local Moran’s I**, to detect clusters and/or outliers in the **2012 GDP per capita** data of Hunan Province, PRC.

## Computing Contiguity Spatial Weights

Before we can compute the local spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

> [`poly2nb()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

More specifically, the code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

::: callout-note
-   There are 88 area units in Hunan.

-   The most connected area unit has 11 neighbours.

-   There are two area units with only one neighbour.
:::

## Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.

> While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.
>
> For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

::: callout-important
-   The input of [`nb2listw()`](https://r-spatial.github.io/spdep/reference/nb2listw.html) must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.

-   *style* can take values “W”, “B”, “C”, “U”, “minmax” and “S”.

    -   B is the basic binary coding,
    -   W is row standardised (sums over all links to n),
    -   C is globally standardised (sums over all links to n),
    -   U is equal to C divided by the number of neighbours (sums over all links to unity),
    -   S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.
:::

## Computing local Moran’s I

To compute **local Moran’s I**, we will use the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function from the **spdep** package. This function computes the **Ii** values for each observation, given a set of **zi** values (the variable of interest) and a `listw` object, which provides the spatial weights for the neighboring polygons associated with the **zi** values.

The code chunks below illustrate how to compute local Moran’s I for **GDP per capita in 2012 (GDPPC2012)** at the county level.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

::: callout-note
The [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function returns a matrix of values, with the following columns:

-   **Ii**: The local Moran’s I statistic.

-   **E.Ii**: The expected value of the local Moran’s I statistic under the randomization hypothesis.

-   **Var.Ii**: The variance of the local Moran’s I statistic under the randomization hypothesis.

-   **Z.Ii**: The standardized deviate (z-score) of the local Moran’s I statistic.

-   **Pr()**: The p-value associated with the local Moran’s I statistic.
:::

The code chunk below lists the contents of the local Moran’s I matrix using `printCoefmat()` to display the results.

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=hunan$County[fips]),
  check.names=FALSE)
```

### Mapping the local Moran’s I

Before mapping the **local Moran’s I** results, it is advisable to append the local Moran’s I dataframe (i.e., `localMI`) to the **hunan** `SpatialPolygonDataFrame`. The code chunk below demonstrates how to perform this task. The resulting `SpatialPolygonDataFrame` is named `hunan.localMI`.

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

### Mapping local Moran’s I values

Using the choropleth mapping functions from the **tmap** package, we can plot the local Moran’s I values. The code chunk below illustrates how to create this map.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

### Mapping local Moran’s I p-values

The choropleth map shows evidence of both positive and negative **Ii** values. However, it is important to also consider the p-values associated with these values.

The code chunk below demonstrates how to produce a choropleth map of **Moran’s I p-values** using the functions from the **tmap** package.

```{r fig.width=16, fig.height=8}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

### Mapping both local Moran’s I values and p-values

For effective interpretation, it is beneficial to plot both the **local Moran’s I values map** and the corresponding **p-values map** side by side.

The code chunk below demonstrates how to create this visualization.

```{r fig.width=16, fig.height=8}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

# Creating a LISA Cluster Map

The **LISA Cluster Map** highlights significant locations, color-coded by the type of spatial autocorrelation. Before generating the LISA cluster map, the first step is to plot the **Moran scatterplot**.

## Plotting Moran scatterplot

The **Moran scatterplot** illustrates the relationship between the values of a chosen attribute at each location and the average value of the same attribute at neighboring locations.

The code chunk below plots the **Moran scatterplot** for **GDPPC 2012** using the [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) function from the **spdep** package.

```{r fig.width=8, fig.height=8}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

> Notice that the plot is split into four quadrants. The **top right quadrant** represents areas with high **GDPPC**, surrounded by other areas with similarly high average GDPPC. These are referred to as the **high-high locations**, as shown in the lesson slide.

## Plotting Moran scatterplot with standardised variable

First, we will use the [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) function to **center and scale** the variable. Centering is performed by subtracting the mean (ignoring NAs) from each value in the corresponding columns, while scaling is done by dividing the centered values by their standard deviations.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector 
```

> The `as.vector()` function at the end ensures that the output is a vector, which integrates smoothly into our dataframe.

Now, we are ready to plot the **Moran scatterplot** again using the code chunk below.

```{r fig.width=8, fig.height=8}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

## Preparing LISA map classes

The code chunks below demonstrate the steps required to prepare a **LISA cluster map**.

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Next, we derive the **spatially lagged variable** of interest (i.e., **GDPPC**) and center it around its mean.

```{r}
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
```

This is followed by centering the **local Moran’s I** values around their mean.

```{r}
LM_I <- localMI[,1] - mean(localMI[,1])    
```

Next, we will set a **statistical significance level** for the **local Moran’s I**.

```{r}
signif <- 0.05
```

These four command lines define the **low-low (1)**, **low-high (2)**, **high-low (3)**, and **high-high (4)** spatial autocorrelation categories.

```{r}
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3
quadrant[DV >0 & LM_I>0] <- 4
```

Lastly, non-significant **Moran’s I** values are placed in **category 0**.

```{r}
quadrant[localMI[,5]>signif] <- 0
```

## Plotting LISA map

Now, we can build the **LISA map** using the code chunks below.

```{r fig.width=16, fig.height=8}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

For effective interpretation, it is helpful to plot both the **local Moran’s I values map** and the corresponding **p-values map** side by side.

The code chunk below demonstrates how to create this visualization.

```{r fig.width=16, fig.height=8}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, 
             asp=1, ncol=2)
```

We can also include the **local Moran’s I map** and the **p-values map** together, as shown below, to facilitate easy comparison.

```{r fig.width=16, fig.height=8}
tmap_arrange(localMI.map, pvalue.map, 
             asp=1, ncol=2)
```

::: callout-note
**LISA Cluster Map Observations:**

-   **High-High Clusters (Red)**: Concentrated in the **eastern** part of the province, indicating areas of high GDPPC surrounded by similarly prosperous regions.
-   **Low-Low Clusters (Dark Blue)**: Found in the **south-central** areas, representing underdeveloped regions with low GDPPC.
-   **Low-High Areas (Light Blue)**: Highlight economic disparities, where low GDPPC regions are adjacent to high GDPPC regions.
-   **Insignificant Regions (White)**: These areas show no significant spatial autocorrelation.

Overall, economic development is uneven, with clear clusters of both prosperity and underdevelopment.
:::

# Hot Spot and Cold Spot Area Analysis

Besides detecting clusters and outliers, localized spatial statistics can also be used to identify **hot spots** and/or **cold spots**.

The term **‘hot spot’** is used across various disciplines to describe a region or value that is significantly higher relative to its surroundings (Lepers et al. 2005, Aben et al. 2012, Isobe et al. 2015).

## Getis and Ord’s G-Statistics

An alternative spatial statistics method for detecting spatial anomalies is the **Getis and Ord’s G-statistics** (Getis and Ord, 1972; Ord and Getis, 1995). This method evaluates neighbors within a defined proximity to identify areas where high or low values cluster spatially. Statistically significant hot spots are recognized as areas with high values surrounded by neighborhoods with similarly high values.

The analysis involves three key steps:

1.  Deriving a spatial weight matrix.
2.  Computing Gi statistics.
3.  Mapping Gi statistics.

## Deriving distance-based weight matrix

First, we need to define a new set of neighbors. While spatial autocorrelation considers units that share borders, the **Getis-Ord G-statistics** method defines neighbors based on **distance**.

There are two types of distance-based proximity matrices:

1.  **Fixed distance weight matrix**
2.  **Adaptive distance weight matrix**

### Deriving the centroid

We need to associate points with each polygon before creating our connectivity graph. This involves more than just running `st_centroid()` on the `sf` object `us.bound`. The centroid coordinates must be stored in a separate dataframe. To achieve this, we use a **mapping function**, which applies a function to each element of a vector and returns a vector of the same length.

In this case, our input vector is the **geometry** column of `us.bound`, and our function is `st_centroid()`. We will use `map_dbl()` from the **purrr** package to extract the centroid coordinates. For documentation, refer to the **map** documentation.

To get the **longitude** values, we map the `st_centroid()` function over the geometry column and use double bracket notation `[[ ]]` and `1` to access the first value (longitude) in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We apply the same process for **latitude**, with one key difference: we access the **second value** of each centroid using `[[2]]`.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have both **latitude** and **longitude**, we use `cbind()` to combine them into a single object.

```{r}
coords <- cbind(longitude, latitude)
```

### Determine the cut-off distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.
-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).
-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.
-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

> The summary report indicates that the largest first nearest neighbor distance is **61.79 km**. Using this as the upper threshold ensures that every unit will have at least one neighbor.

### Computing fixed distance weight matrix

Now, we will compute the distance weight matrix by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

> The output spatial weights object is called `wm62_lw`.

### Computing adaptive distance weight matrix

One characteristic of a **fixed distance weight matrix** is that densely settled areas (typically urban areas) tend to have more neighbors, while less densely settled areas (typically rural counties) have fewer neighbors. Having many neighbors smoothes the spatial relationships across a broader range of neighbors.

It is also possible to directly control the number of neighbors using **k-nearest neighbors**, either accepting asymmetric neighbors or enforcing symmetry, as demonstrated in the code chunk below.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

# Computing Gi statistics

## Gi statistics using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

The output of `localG()` is a vector of **G** or **Gstar** values, with attributes `"gstari"` set to **TRUE** or **FALSE**, `"call"` representing the function call, and class `"localG"`.

The **Gi statistic** is represented as a **Z-score**, where higher values indicate greater clustering intensity. The direction (positive or negative) reveals whether the cluster is high or low.

Next, we will join the **Gi values** to their corresponding **hunan** `sf` data frame using the code chunk below.

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

In fact, the code chunk above performs three tasks:

1.  First, it converts the output vector (`gi.fixed`) into an R matrix using `as.matrix()`.
2.  Next, `cbind()` is used to join `hunan@data` with the `gi.fixed` matrix, creating a new `SpatialPolygonDataFrame` called `hunan.gi`.
3.  Finally, the field name for the Gi values is renamed to **gstat_fixed** using `rename()`.

## Mapping Gi values with fixed distance weights

The code chunk below demonstrates the functions used to map the **Gi values** derived from the **fixed distance weight matrix**.

```{r fig.width=16, fig.height=8}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

::: callout-note
**Gi Map Observations:**

-   **Hot Spots (Red)**: Significant high GDPPC clusters in the **central and northeastern** regions.
-   **Cold Spots (Blue)**: Significant low GDPPC clusters in the **southern and southwestern** regions.
-   **Neutral Areas (White/Grey)**: No significant clustering of high or low GDPPC.

These clusters indicate economic disparities, with stronger economies in the hot spot areas and weaker ones in the cold spots.
:::

## Gi statistics using adaptive distance

The code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e *knb_lw*).

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

## Mapping Gi values with adaptive distance weights

It’s time to visualize the locations of hot spots and cold spots. We will use the **choropleth mapping functions** from the **tmap** package to map the **Gi values**.

The code chunk below demonstrates the functions used to map the Gi values derived from the **fixed distance weight matrix**.

```{r fig.width=16, fig.height=8}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```

::: callout-note
**Gi Map Observations:**

-   **Hot Spots (Red)**: Significant high GDPPC clusters in the **northeastern** region, indicating strong economic performance.
-   **Cold Spots (Blue)**: Significant low GDPPC clusters in the **southern** region, reflecting weaker economic performance.
-   The map highlights distinct areas of economic prosperity and underperformance, with clear clustering of GDPPC values.
:::

# Reference

Kam, T. S. Local Measures of Spatial Autocorrelation. *R for Geospatial Data Science and Analytics.* <https://r4gdsa.netlify.app/chap10.html>
