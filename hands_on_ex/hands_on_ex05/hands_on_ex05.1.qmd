---
title: "Hands-on Exercise 5a: Global Measures of Spatial Autocorrelation"
subtitle: "In this exercise, we will learn to compute Global Measures of Spatial Autocorrelation using the **spdep** package, including Moran's I and Geary's C tests, spatial correlograms, and their statistical interpretation."
author: "Christover Manafe"
date: "2024-09-18"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
format: 
  html:
    code-fold: false
    code-summary: "code chunk"
    number-sections: true
    number-depth: 4
---

# Overview

In this hands-on exercise, we will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using **spdep** package. By the end to this hands-on exercise, we will be able to:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,

    -   plot Moran scatterplot,

    -   compute and plot spatial correlogram using appropriate function of **spdep** package.

-   provide statistically correct interpretation of GSA statistics.

# The Data

We will use following geospatial datasets in this exercise:

| Dataset      | Description                                                    | Format         |
|-------------------|--------------------------------|---------------------|
| *Hunan*      | Hunan county boundary layer geospatial data                    | ESRI shapefile |
| *Hunan_2012* | Contains selected Hunan’s local development indicators in 2012 | CSV file       |

: {tbl-colwidths="\[15,65,20\]"}

# Installing and launching the R packages

::: panel-tabset
## Packages

We will use following packages in this exercise:

| Package                                                     | Description                                                                                                                                                                                                          |
|---------------------------|---------------------------------------------|
| [**sf**](https://r-spatial.github.io/sf/)                   | Provides functions to manage, processing, and manipulate **Simple Features**, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons. |
| [**spdep**](https://cran.r-project.org/web/packages/spdep/) | Provides collection of functions to create spatial weights matrix objects from polygon 'contiguities', from point patterns by distance and tessellations.                                                            |
| [**tidyverse**](https://www.tidyverse.org/)                 | Provides collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data.                                                                                   |
| [**tmap**](https://cran.r-project.org/web/packages/tmap/)   | Provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API                                                                   |

: {tbl-colwidths="\[15,85\]"}

## Code

To install and launch the four R packages.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```
:::

# Data Import and Preparation

## Loading the data

In this section, we will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.

::: panel-tabset
## Import geospatial data

We use [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

```{r}
#| echo: false
glimpse(hunan)
```

## Import aspatial data

Then we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R dataframe class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
#| echo: false
glimpse(hunan2012)
```

## Perform relational join

We will also update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.

```{r}
colnames(hunan)
```

```{r}
colnames(hunan2012)
```

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
```

```{r}
#| echo: false
glimpse(hunan)
```
:::

## Visualising Regional Development Indicator

Now, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using `qtm()` of **tmap** package.

```{r fig.width=16, fig.height=8}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

# Global Measures of Spatial Autocorrelation

In this section, we will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.

### Computing Contiguity Spatial Weights

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

> [`poly2nb()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

More specifically, the code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

::: callout-note
-   There are 88 area units in Hunan.

-   The most connected area unit has 11 neighbours.

-   There are two area units with only one neighbour.
:::

### Row-standardised weights matrix

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.

> While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.
>
> For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

::: callout-important
-   The input of [`nb2listw()`](https://r-spatial.github.io/spdep/reference/nb2listw.html) must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.

-   *style* can take values “W”, “B”, “C”, “U”, “minmax” and “S”.

    -   B is the basic binary coding,
    -   W is row standardised (sums over all links to n),
    -   C is globally standardised (sums over all links to n),
    -   U is equal to C divided by the number of neighbours (sums over all links to unity),
    -   S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).

-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.
:::

# Global Measures of Spatial Autocorrelation: Moran’s I

In this section, we will learn how to perform Moran’s I statistics testing by using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

::: panel-tabset
## Moran's I test

Let us perform Moran’s I statistical testing using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

::: callout-note
**Question: What statistical conclusion can you draw from the output above?**

-   The p-value which is 1.095e-06, which is very small

-   We will **reject** the null hypothesis at 99.9% as the p-value is smaller than our alpha value.

-   Since the Moran I statistic 0.300749970 is \> 0 and is approaching 1 which is positive autocorrelation, we can infer that spatial patterns resemble a cluster.
:::

## Monte Carlo Moran’s I

Let us also perform permutation test for Moran’s I statistic by using [`moran.mc()`](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

::: callout-note
**Question: What statistical conclusion can you draw from the output above?**

-   After 999 simulations, our P-value is 0.001.

-   We will **accept** / **do not reject** the null hypothesis at 99.9% as the p-value is equal to our alpha value 0.001.

-   Since the Monte Carlo statistic 0.30075 is \> 0 and is approaching 1 which is positive autocorrelation, we can infer that spatial patterns that we observed resemble a cluster.
:::

## Visualising Monte Carlo Moran’s I

We can examine the simulated Moran’s I test statistics in greater detail by plotting the distribution of the statistical values as a histogram.

We will use [`hist()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [`abline()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics to visualise the test statistics.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red")
```

We also able to plot the values by using `ggplot2` package.

```{r}
gg <- bperm$res
mu <- mean(gg)

ggplot(data=data.frame(gg),
       aes(x=gg)
  ) +
  geom_histogram(
    bins = 30,
    size = 0.2,
    color = "black"
  ) +
  geom_vline(
    xintercept = mu,
    color="red",
    linetype = "solid"
  ) +
  labs(title ="Histogram of bperm$res",
    x = "Simulated Moran's I",
    y = "Frequency"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5),
  )
```

::: callout-note
**Question: What statistical observation can we draw from the output?**

-   The observed Moran's I, as indicated by the red line, is substantially larger than the bulk of the simulated values, which implies that the observed spatial autocorrelation in the data is **significantly different from random chance**.

-   Since most of the simulated values are close to 0 and the observed Moran’s I is positive and beyond the central bulk of the distribution, we can infer that the spatial autocorrelation in your data is significant. This suggests that similar values (in terms of the variable you are analyzing) are **spatially clustered**.
:::
:::

# Global Measures of Spatial Autocorrelation: Geary’s C

In this section, we will learn how to perform Geary’s C statistics testing by using appropriate functions of **spdep** package.

::: panel-tabset
## Geary’s C test

We will perform Geary’s C test for spatial autocorrelation by using [`geary.test()`](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

::: callout-note
**Question: What statistical conclusion can we draw from the output above?**

The Geary’s C statistic for \`GDPPC\` is 0.6907, indicating \*\*positive spatial autocorrelation\*\*. This suggests that regions with similar GDP per capita are spatially clustered. The standard deviate of 3.6108 and the p-value of 0.0001526 provide strong evidence against the null hypothesis of no spatial autocorrelation, confirming that the observed pattern is clustered.
:::

## Computing Monte Carlo Geary’s C

Let us perform permutation test for Geary’s C statistic by using [`geary.mc()`](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

::: callout-note
**Question: What statistical conclusion can we draw from the output above?**

-   After running all simulations, the p-value = 0.001.

-   Hence, we will **accept** / **cannot reject** the null hypothesis at 99.9% as the p-value is equal to our alpha value, 0.001.

-   The Geary C statistic is now, 0.69072, which is still \< 1, hence the spatial pattern is “clustered”.
:::

## Visualising the Monte Carlo Geary’s C

Next, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

::: callout-note
**Question: What statistical observation can we draw from the output?**

The histogram of simulated Geary's C values shows that most of the simulated statistics cluster around 1, indicating random spatial patterns. However, the observed Geary's C statistic is much lower, indicating significant **spatial clustering** of similar values. This supports the conclusion that the spatial pattern in the data is **not random** but exhibits **positive spatial autocorrelation**.
:::
:::

# Spatial Correlogram

**Spatial correlograms** are a useful tool for examining patterns of spatial autocorrelation in your data or model residuals. They show how the correlation between pairs of spatial observations changes as the distance (lag) between them increases. Correlograms plot an index of autocorrelation, such as **Moran’s I** or **Geary’s C**, against distance.

Although correlograms are not as fundamental as **variograms** (a cornerstone concept in geostatistics), they serve as a valuable exploratory and descriptive tool. In fact, for many purposes, correlograms can provide richer information than variograms.

::: panel-tabset
## Moran’s I correlogram

We will use the [`sp.correlogram()`](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) function from the **spdep** package to compute a 6-lag spatial correlogram for **GDPPC**, using **Moran’s I** to assess global spatial autocorrelation. The results will then be plotted using the base `plot()` function in R.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

> Plotting the output alone might not provide a complete interpretation, as not all autocorrelation values may be statistically significant. Therefore, it's important to examine the full analysis by printing the detailed results, as shown in the code chunk below.

```{r}
print(MI_corr)
```

::: callout-note
Question: What statistical observation can we draw from the plot above?

-   Positive Moran’s I values for shorter lags (1–3), reflecting spatial clustering of similar values.

-   Negative Moran’s I values for longer lags (5–6), indicating spatial divergence of values.

-   Error bars help visualize the variability and significance of these estimates. Significant values (lags 1, 2, 3, 5, and 6) stand out more due to their separation from zero, while lag 4 hovers around zero and is not statistically significant.

This pattern suggests that similar GDP per capita values are clustered spatially at short distances, but regions farther apart are more likely to have contrasting GDP per capita values.
:::

## Geary’s C correlogram

We will use `sp.correlogram()` function from the **spdep** package to compute a 6-lag spatial correlogram for **GDPPC**, using **Geary’s C** to assess global spatial autocorrelation. The results will then be plotted using the base `plot()` function in R.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

Let us see the analysis report

```{r}
print(GC_corr)
```
:::

# Reference

Kam, T. S. Global Measures of Spatial Autocorrelation. *R for Geospatial Data Science and Analytics.* <https://r4gdsa.netlify.app/chap09.html>
