---
title: "Hands-on Exercise 1a: Geospatial Data Wrangling"
subtitle: "In this exercise, we will learn to use R for geospatial data handling, including importing, transforming, wrangling, and visualizing data with sf, tidyverse, and ggplot2."
author: "Christover Manafe"
date: "2024-08-24"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
format: 
  html:
    code-fold: true
    code-summary: "code chunk"
    number-sections: true
    number-depth: 4
---

# Overview

In this hands-on exercise, I learn how to import and wrangle geospatial data using appropriate R packages.

# Getting Started

The code chunk below install and load [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) into R environment using p_load() of pacman package.

```{r}
pacman::p_load(sf, tidyverse)
```

# Importing Geospatial Data

## Importing polygon feature data

Dataset sources:

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)
-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)
-   Cycling Path from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en/search_datasets.html?searchText=Cycling%20Path)
-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](https://insideairbnb.com/get-the-data/)

Using [st_read()](https://r-spatial.github.io/sf/reference/st_read.html) to import the dataset.
### Polygon data in shapefile format

```{r}
mpsz = st_read(dsn = "data/geospatial",
               layer = "MP14_SUBZONE_WEB_PL")
```

### Polyline data in shapefile format

```{r}
cyclingpath = st_read(dsn = "data/geospatial",
                      layer = "CyclingPathGazette")
```

### GIS data in KML format

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

## Checking content of a simple data frame

1.  Extracting geometric information using [sf_geometry()](https://r-spatial.github.io/sf/reference/st_geometry.html)
    ```{r}
    st_geometry(mpsz)
    ```

2.  Data structure overview using [glimpse()](https://dplyr.tidyverse.org/reference/glimpse.html)
    ```{r}
    glimpse(mpsz)
    ```

3.  Data preview using [head()](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head)
    ```{r}
    head(mpsz, n=5)
    ```

## Visualizing the geospatial data

1.  Using *plot()* of R Graphic to visualize the geospatial features from the data.

    ```{r}
    plot(mpsz)
    ```

2.  Plot only the geometry attributes
    ```{r}
    plot(st_geometry(mpsz))
    ```
3.  Plot only specific attributes (e.g.: `PLN_AREA_N`)
    ```{r}
    plot(mpsz["PLN_AREA_N"])
    ```
## Assigning EPSG code to simple feature data frame
This is an example the coordinate system of mpsz simple feature data frame by using [st_crs()](https://r-spatial.github.io/sf/reference/st_crs.html) of sf package
```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in svy21 but it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

Assign correct EPSG code to `mpsz` data frame:
```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Check CSR again
```{r}
st_crs(mpsz3414)
```

## Transforming the projection of preschool from wgs84 to svy21
Reproject `preschool` from one coordinate system to another coordinate system mathemetically
```{r}
preschool3414 <- st_transform(preschool,
                              crs = 3414)
```

# Importing Aspatial Data
## Import listing data
```{r}
listings <- read_csv("data/aspatial/listings.csv")
```
Check the dataset after importing to see if its imported correctly.

## Create simple feature data frame from aspatial data frame
Convert `listing` data frame into simple feature data frame using [st_as_sf()](https://r-spatial.github.io/sf/reference/st_as_sf.html)
```{r}
listings_sf <- st_as_sf(listings,
                        coords = c("longitude", "latitude"),
                        crs=4326) %>%
  st_transform(crs = 3414)
```

Examine the content of newly created data frame.
```{r}
glimpse(listings_sf)
```

# Geoprocessing with sf package
Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

Let's perform two commonly used geoprocessing functions, namely [buffering](https://www.geographyrealm.com/buffers-in-gis/) and point in polygon count.

## Buffering
**The scenario:**

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

**The solution:**

1.  Use [st_buffer()](https://r-spatial.github.io/sf/reference/geos_unary.html) of sf package to compute the 5-meter buffers around cycling paths
    ```{r}
    buffer_cycling <- st_buffer(cyclingpath,
                                dist=5,
                                nQuadSegs = 30)
    ```
2.  Calculate the area of the buffers
    ```{r}
    buffer_cycling$AREA <- st_area(buffer_cycling)
    ```
3.  Derive the total land involved using `sum()` of Base R
    ```{r}
    sum(buffer_cycling$AREA)
    ```

## Point-in-polygon count
**The scenario:**

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

**The solution:**

1.  The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Then, [length()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.
    ```{r}
    mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
    ```
2.  Check the summary statistics of the newly derived `PreSch Count` field by using *summary()* function.
    ```{r}
    summary(mpsz3414$`PreSch Count`)
    ```
3.  List the planning subzone with the most number of pre-school using [top_n()](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package
    ```{r}
    top_n(mpsz3414, 1, `PreSch Count`)
    ```

:::{.callout-note}
**DIY:** Calculate the density of pre-school by planning subzone.

1.  Use [st_area()](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive the area of each planning subzone.
    ```{r}
    mpsz3414$Area <- mpsz3414 %>%
      st_area()
    ```

2.  Use [mutate()](https://dplyr.tidyverse.org/reference/mutate.html) of **dplyr** package to compute the density.
    ```{r}
    mpsz3414 <- mpsz3414 %>%
      mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
    ```
:::

# Exploratory Data Analysis (EDA)
Using appropriate [ggplot2](https://ggplot2.tidyverse.org/) functions to create functional and yet truthful statistical graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used.
```{r}
hist(mpsz3414$`PreSch Density`)
```

Let's use appropriate **ggplot2** functions for better output
```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```


:::{.callout-note}

**DIY:** Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.
```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
:::

# Reference

Kam, T. S. Geospatial Data Science with R. R for Geospatial Data Science and Analytics. https://r4gdsa.netlify.app/chap01.html