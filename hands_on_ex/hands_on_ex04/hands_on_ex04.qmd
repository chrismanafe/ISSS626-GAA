---
title: "In-class Exercise 3: Advanced Spatial Point Patterns Analysis"
author: "Christover Manafe"
date: "2024-09-10"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
format: 
  html:
    code-fold: false
    code-summary: "code chunk"
    number-sections: true
    number-depth: 4
---

# Overview

In this hands-on exercise, we will learn how to compute spatial weights using R.

# The Data

We will use following geospatial datasets in this exercise:

| Dataset      | Description                                                    | Format         |
|-------------------|--------------------------------|---------------------|
| *Hunan*      | Hunan county boundary layer geospatial data                    | ESRI shapefile |
| *Hunan_2012* | Contains selected Hunan’s local development indicators in 2012 | CSV file       |

: {tbl-colwidths="\[15,65,20\]"}

# Installing and launching the R packages

::: panel-tabset
## Packages

We will use following packages in this exercise:

| Package                                                     | Description                                                                                                                                                                                                          |
|---------------------------|---------------------------------------------|
| [**sf**](https://r-spatial.github.io/sf/)                   | Provides functions to manage, processing, and manipulate **Simple Features**, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons. |
| [**spdep**](https://cran.r-project.org/web/packages/spdep/) | Provides collection of functions to create spatial weights matrix objects from polygon 'contiguities', from point patterns by distance and tessellations.                                                            |
| [**tidyverse**](https://www.tidyverse.org/)                 | Provides collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data.                                                                                   |
| [**tmap**](https://cran.r-project.org/web/packages/tmap/)   | Provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API                                                                   |
| [**knitr**](https://cran.r-project.org/web/packages/knitr/) | Provides a general-purpose tool for dynamic report generation in R using Literate Programming techniques.                                                                                                            |

: {tbl-colwidths="\[15,85\]"}

## Code

To install and launch the four R packages.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```
:::

# Data Import and Preparation

::: panel-tabset
## Import geospatial data

We use [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

```{r}
#| echo: false
glimpse(hunan)
```

## Import aspatial data

Then we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R dataframe class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
#| echo: false
glimpse(hunan2012)
```

## Perform relational join

We will also update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe. This is performed by using *left_join()* of **dplyr** package.

```{r}
colnames(hunan)
```

```{r}
colnames(hunan2012)
```

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4, 7, 15)
```

```{r}
#| echo: false
glimpse(hunan)
```
:::

# Visualising Regional Development Indicator

We will prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.25)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# Computing Contiguity Spatial Weights

## Computing contiguity using `poly2nb()`

::: {.callout-tip title="poly2nb"}
We will explore how to use the [poly2nb()](https://r-spatial.github.io/spdep/reference/poly2nb.html) function from the **spdep** package to compute contiguity weight matrices for the study area. This function generates a neighbors list based on regions with shared boundaries.

**Key Parameters**

-   **`queen`**:\
    Determines the contiguity criteria:

    -   `TRUE` (default): Implements the **Queen contiguity**, where regions are considered neighbors if they share either a border or a corner.
    -   `FALSE`: Implements the **Rook contiguity**, where regions are neighbors only if they share a border.

> **Note**: If we do not specify the `queen` argument, it defaults to `TRUE`, meaning the function will return a list of first-order neighbors using the Queen contiguity rule.
:::

::: panel-tabset
### Queen contiguity

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

We found out that:

-   There are 88 area units in Hunan.
-   The most connected area unit has 11 neighbours.
-   There are 2 area units with only one neighbours.

### Rook contiguity

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

We found out that:

-   There are 88 area units in Hunan.
-   The most connected area unit has 10 neighbours.
-   There are 2 area units with only one neighbours.
:::

### Display neighbour(s) of a county

For each polygon in our polygon object, *wm_q* lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, we can type:

```{r}
wm_q[[1]]
```

We see that Polygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.

### Retrieve County Name by polygon ID

We can retrive the county name of Polygon ID=1 by using following code:

```{r}
hunan$County[1]
```

The output reveals that Polygon ID=1 is `Anxiang` county.

To reveal the county names of the five neighboring polygons, we can use following code:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

### Retrieve GDPPC

We can retrieve the GDPPC of these five countries by using following code:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

### Display complete weight matrix using *str()*

```{r}
str(wm_q)
```

## Visualising contiguity weights

A connectivity graph connects each point to its neighboring points with lines. Since we are working with polygons, we need to derive points to create these graphs. The most common approach is to use **polygon centroids**.

-   Calculate these in the sf package before moving onto the graphs.
-   Get Latitude and Longitude of Polygon Centroids.
-   It is a little more complicated than just running `st_centroid` on the `sf`object, because we need to extract the latitude and longitude coordinates into a separate data frame.
-   We also need `map_dbl()` function as a mapping function from the **purrr** package. This function applies a given function to each element of a vector and returns a vector of the same length. The argument will be:
    -   **Input Vector**: The geometry column.
    -   **Function**: `st_centroid()`

This process will give us the latitude and longitude of the centroids in a format we can use for further analysis.

> **For more details**: Refer to the [purrr `map` documentation](https://purrr.tidyverse.org/reference/map.html).

### Get Latitude and Longitude of Polygon Centroids

::: panel-tabset
#### Longitude

To get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the `first` value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

#### Latitude

We do the same for latitude with one key difference. We access the `second` value per each centroid.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

#### Coordinates

Now that we have latitude and longitude, we use `cbind()` to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

Let's verify the first few observations to see if `coords` are formatted correctly.

```{r}
head(coords)
```
:::

### Plotting contiguity-based neighbours map

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# Computing distance based neighbours

We will learn how to derive distance-based weight matrices by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) of **spdep** package.

The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument.

If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

## Determine the cut-off distance

We need to determine the upper limit for distance band by using following steps:

| Step | Description                                                                                                                      | Function                                                                                   |
|-------------------|----------------------------------|-------------------|
| 1    | Return a matrix with the indices of points belonging to the set of the k-nearest neighbours (knn) of each other.                 | [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep** |
| 2    | Convert the knn object into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids. | [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html) of **spdep**         |
| 3    | Return the length of neighbour relationship edges.                                                                               | [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**       |
| 4    | Remove the list structure of the returned object.                                                                                | [unlist()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist)      |

: {tbl-colwidths="\[10,65,25\]"}

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is `61.79` km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

## Computing fixed distance weight matrix

We will compute the distance weight matrix by using `dnearneigh()` function

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

> The "Average number of links: 3.681818" means that, on average, each region is connected to approximately 3.68 neighboring regions based on the specified distance criteria.

We'll display the content of `wm_d62` weight matrix.

::: panel-tabset
### Using `str()`

```{r}
str(wm_d62)
```

### Using `table()` and `card()`

```{r}
table(hunan$County, card(wm_d62))
```
:::

Let us the number of disjoint connected subgraphs in the graph.

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

### Plotting fixed distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The **red lines** show the links of 1st nearest neighbours and the **black lines** show the links of neighbours within the cut-off distance of `62km`.

Alternatively, we can plot both of them next to each other.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

## Computing adaptive distance weight matrix

For fixed distance weight matrix, more densely settled areas (usually urban areas) tend to have more neighbours and the less densely settled areas (usually rural counties) tend to have lesser neighbours.

Having many neighbours smoothes the neighbour relationship across more neighbours.

::: panel-tabset
### Control the number of neighbours

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

> Notice that each county has at most 6 neighbours.

```{r}
str(knn6)
```

### Plotting distance based neighbours

We can plot the weight matrix using following code:

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```
:::

# Weights based on `Inversed Distance Weights` (IDW)

## Step 1: Compute the distance between areas using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## Step 2: Row-standardised Weights Matrix

Then we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned **equal weight** (`style=“W”`). This is accomplished by assigning the fraction 1/(# of neighbors) to each neighboring county then summing the weighted income values.

While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.

> For this example, we’ll use `style=“W”` option for simplicity’s sake but more robust options are available, notably `style=“B”`.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

> `zero.policy = TRUE` option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a `zero.policy = FALSE` would return an error.

To see the weight of the first polygon’s eight neighbors:

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied.

Using the same method, we can also derive a row standardised distance weight matrix by using following code:

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

# Application of Spatial Weight Matrix

In this section, we will learn how to create four different spatial lagged variables, they are:

-   spatial lag with row-standardized weights.
-   spatial lag as a sum of neighbouring values.
-   spatial window average.
-   spatial window sum.

## Spatial lag with row-standardized weights

We will compute the average neighbor GDPPC value for each polygon. These values are often referred to as **spatially lagged values**.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Then we can append the spatially lag GDPPC values onto hunan sf data frame.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The following table shows the average neighboring income values (stored in the Inc.lag object) for each county.

```{r}
head(hunan)
```

Next, we will plot both the GDPPC and spatial lag GDPPC for comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

## Spatial lag as a sum of neighboring values

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the `nb2listw` function to explicitly assign these weights.

We start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use `lag.listw` to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

Next, we will append the lag_sum GDPPC field into hunan sf data frame.

```{r}
hunan <- left_join(hunan, lag.res)
```

Now, we can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

## Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Notice that the Number of nonzero links, Percentage nonzero weights and Average number of links are `536`, `6.921488` and `6.090909` respectively as compared to wm_q of `448`, `5.785124` and `5.090909`.

Let us take a good look at the neighbour list of area \[1\].

```{r}
wm_qs[[1]]
```

Notice that now `[1]` has six neighbours instead of five.

Now we obtain weights with *nb2listw()*

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Again, we use *nb2listw()* and *glist()* to explicitly assign weight values.

Lastly, we just need to create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

Next, we will convert the lag variable listw object into a data.frame by using `as.data.frame()`.

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Note: The third command line on the code chunk above renames the field names of *lag_wm_q1.res* object into *NAME_3* and *lag_window_avg GDPPC* respectively.

Next, the code chunk below will be used to append *lag_window_avg GDPPC* values onto *hunan* sf data.frame by using *left_join()* of **dplyr** package.

```{r}         
hunan <- left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Lastly, `qtm()` of **tmap** package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

> Note: For more effective comparison, it is advisable to use the core tmap mapping functions.

## Spatial window sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights.

To add the diagonal element to the neighbour list, we just need to use `include.self()` from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Next, we will assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```


Notice that now `[1]` has six neighbours instead of five.

Again, we use `nb2listw()` and `glist()` to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our new weight structure, we can compute the lag variable with `lag.listw()`.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable listw object into a data.frame by using `as.data.frame()`.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

> Note: The second command line on the code chunk above renames the field names of` w_sum_gdppc.res` object into *NAME_3* and `w_sum GDPPC` respectively.

Next, the code chunk below will be used to append *w_sum GDPPC* values onto *hunan* sf data.frame by using `left_join()` of **dplyr** package.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of **Knitr** package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Lastly, `qtm()` of **tmap** package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```

> Note: For more effective comparison, it is advisable to use the core tmap mapping functions.

# Reference

Kam, T. S. Spatial Weights and Applications. *R for Geospatial Data Science and Analytics.* <https://r4gdsa.netlify.app/chap08.html>
